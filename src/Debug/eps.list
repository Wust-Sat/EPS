
eps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005354  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080054e4  080054e4  000064e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005550  08005550  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005550  08005550  00006550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005558  08005558  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005558  08005558  00006558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005560  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000068  080055c8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  080055c8  000073c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000975a  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002516  00000000  00000000  000107f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00012d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d8  00000000  00000000  00013660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e40  00000000  00000000  00013d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d253  00000000  00000000  00034b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf07b  00000000  00000000  00041dcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100e46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b58  00000000  00000000  00100e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001039e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054cc 	.word	0x080054cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080054cc 	.word	0x080054cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b988 	b.w	8000d74 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	468e      	mov	lr, r1
 8000a84:	4604      	mov	r4, r0
 8000a86:	4688      	mov	r8, r1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d14a      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8c:	428a      	cmp	r2, r1
 8000a8e:	4617      	mov	r7, r2
 8000a90:	d962      	bls.n	8000b58 <__udivmoddi4+0xdc>
 8000a92:	fab2 f682 	clz	r6, r2
 8000a96:	b14e      	cbz	r6, 8000aac <__udivmoddi4+0x30>
 8000a98:	f1c6 0320 	rsb	r3, r6, #32
 8000a9c:	fa01 f806 	lsl.w	r8, r1, r6
 8000aa0:	fa20 f303 	lsr.w	r3, r0, r3
 8000aa4:	40b7      	lsls	r7, r6
 8000aa6:	ea43 0808 	orr.w	r8, r3, r8
 8000aaa:	40b4      	lsls	r4, r6
 8000aac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab0:	fa1f fc87 	uxth.w	ip, r7
 8000ab4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ab8:	0c23      	lsrs	r3, r4, #16
 8000aba:	fb0e 8811 	mls	r8, lr, r1, r8
 8000abe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0x62>
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ad0:	f080 80ea 	bcs.w	8000ca8 <__udivmoddi4+0x22c>
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	f240 80e7 	bls.w	8000ca8 <__udivmoddi4+0x22c>
 8000ada:	3902      	subs	r1, #2
 8000adc:	443b      	add	r3, r7
 8000ade:	1a9a      	subs	r2, r3, r2
 8000ae0:	b2a3      	uxth	r3, r4
 8000ae2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ae6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aee:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af2:	459c      	cmp	ip, r3
 8000af4:	d909      	bls.n	8000b0a <__udivmoddi4+0x8e>
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000afc:	f080 80d6 	bcs.w	8000cac <__udivmoddi4+0x230>
 8000b00:	459c      	cmp	ip, r3
 8000b02:	f240 80d3 	bls.w	8000cac <__udivmoddi4+0x230>
 8000b06:	443b      	add	r3, r7
 8000b08:	3802      	subs	r0, #2
 8000b0a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b0e:	eba3 030c 	sub.w	r3, r3, ip
 8000b12:	2100      	movs	r1, #0
 8000b14:	b11d      	cbz	r5, 8000b1e <__udivmoddi4+0xa2>
 8000b16:	40f3      	lsrs	r3, r6
 8000b18:	2200      	movs	r2, #0
 8000b1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d905      	bls.n	8000b32 <__udivmoddi4+0xb6>
 8000b26:	b10d      	cbz	r5, 8000b2c <__udivmoddi4+0xb0>
 8000b28:	e9c5 0100 	strd	r0, r1, [r5]
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	e7f5      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b32:	fab3 f183 	clz	r1, r3
 8000b36:	2900      	cmp	r1, #0
 8000b38:	d146      	bne.n	8000bc8 <__udivmoddi4+0x14c>
 8000b3a:	4573      	cmp	r3, lr
 8000b3c:	d302      	bcc.n	8000b44 <__udivmoddi4+0xc8>
 8000b3e:	4282      	cmp	r2, r0
 8000b40:	f200 8105 	bhi.w	8000d4e <__udivmoddi4+0x2d2>
 8000b44:	1a84      	subs	r4, r0, r2
 8000b46:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	4690      	mov	r8, r2
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	d0e5      	beq.n	8000b1e <__udivmoddi4+0xa2>
 8000b52:	e9c5 4800 	strd	r4, r8, [r5]
 8000b56:	e7e2      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	f000 8090 	beq.w	8000c7e <__udivmoddi4+0x202>
 8000b5e:	fab2 f682 	clz	r6, r2
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	f040 80a4 	bne.w	8000cb0 <__udivmoddi4+0x234>
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	0c03      	lsrs	r3, r0, #16
 8000b6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b70:	b280      	uxth	r0, r0
 8000b72:	b2bc      	uxth	r4, r7
 8000b74:	2101      	movs	r1, #1
 8000b76:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b7a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b82:	fb04 f20c 	mul.w	r2, r4, ip
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d907      	bls.n	8000b9a <__udivmoddi4+0x11e>
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x11c>
 8000b92:	429a      	cmp	r2, r3
 8000b94:	f200 80e0 	bhi.w	8000d58 <__udivmoddi4+0x2dc>
 8000b98:	46c4      	mov	ip, r8
 8000b9a:	1a9b      	subs	r3, r3, r2
 8000b9c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ba0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ba4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ba8:	fb02 f404 	mul.w	r4, r2, r4
 8000bac:	429c      	cmp	r4, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x144>
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x142>
 8000bb8:	429c      	cmp	r4, r3
 8000bba:	f200 80ca 	bhi.w	8000d52 <__udivmoddi4+0x2d6>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	1b1b      	subs	r3, r3, r4
 8000bc2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000bc6:	e7a5      	b.n	8000b14 <__udivmoddi4+0x98>
 8000bc8:	f1c1 0620 	rsb	r6, r1, #32
 8000bcc:	408b      	lsls	r3, r1
 8000bce:	fa22 f706 	lsr.w	r7, r2, r6
 8000bd2:	431f      	orrs	r7, r3
 8000bd4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bd8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bdc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000be0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000be4:	4323      	orrs	r3, r4
 8000be6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bea:	fa1f fc87 	uxth.w	ip, r7
 8000bee:	fbbe f0f9 	udiv	r0, lr, r9
 8000bf2:	0c1c      	lsrs	r4, r3, #16
 8000bf4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000bf8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000bfc:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	fa02 f201 	lsl.w	r2, r2, r1
 8000c06:	d909      	bls.n	8000c1c <__udivmoddi4+0x1a0>
 8000c08:	193c      	adds	r4, r7, r4
 8000c0a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c0e:	f080 809c 	bcs.w	8000d4a <__udivmoddi4+0x2ce>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f240 8099 	bls.w	8000d4a <__udivmoddi4+0x2ce>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	eba4 040e 	sub.w	r4, r4, lr
 8000c20:	fa1f fe83 	uxth.w	lr, r3
 8000c24:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c28:	fb09 4413 	mls	r4, r9, r3, r4
 8000c2c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c30:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c34:	45a4      	cmp	ip, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x1ce>
 8000c38:	193c      	adds	r4, r7, r4
 8000c3a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c3e:	f080 8082 	bcs.w	8000d46 <__udivmoddi4+0x2ca>
 8000c42:	45a4      	cmp	ip, r4
 8000c44:	d97f      	bls.n	8000d46 <__udivmoddi4+0x2ca>
 8000c46:	3b02      	subs	r3, #2
 8000c48:	443c      	add	r4, r7
 8000c4a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c56:	4564      	cmp	r4, ip
 8000c58:	4673      	mov	r3, lr
 8000c5a:	46e1      	mov	r9, ip
 8000c5c:	d362      	bcc.n	8000d24 <__udivmoddi4+0x2a8>
 8000c5e:	d05f      	beq.n	8000d20 <__udivmoddi4+0x2a4>
 8000c60:	b15d      	cbz	r5, 8000c7a <__udivmoddi4+0x1fe>
 8000c62:	ebb8 0203 	subs.w	r2, r8, r3
 8000c66:	eb64 0409 	sbc.w	r4, r4, r9
 8000c6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c72:	431e      	orrs	r6, r3
 8000c74:	40cc      	lsrs	r4, r1
 8000c76:	e9c5 6400 	strd	r6, r4, [r5]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	e74f      	b.n	8000b1e <__udivmoddi4+0xa2>
 8000c7e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000c82:	0c01      	lsrs	r1, r0, #16
 8000c84:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c88:	b280      	uxth	r0, r0
 8000c8a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4638      	mov	r0, r7
 8000c92:	463c      	mov	r4, r7
 8000c94:	46b8      	mov	r8, r7
 8000c96:	46be      	mov	lr, r7
 8000c98:	2620      	movs	r6, #32
 8000c9a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c9e:	eba2 0208 	sub.w	r2, r2, r8
 8000ca2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ca6:	e766      	b.n	8000b76 <__udivmoddi4+0xfa>
 8000ca8:	4601      	mov	r1, r0
 8000caa:	e718      	b.n	8000ade <__udivmoddi4+0x62>
 8000cac:	4610      	mov	r0, r2
 8000cae:	e72c      	b.n	8000b0a <__udivmoddi4+0x8e>
 8000cb0:	f1c6 0220 	rsb	r2, r6, #32
 8000cb4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cb8:	40b7      	lsls	r7, r6
 8000cba:	40b1      	lsls	r1, r6
 8000cbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cca:	b2bc      	uxth	r4, r7
 8000ccc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cd0:	0c11      	lsrs	r1, r2, #16
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb08 f904 	mul.w	r9, r8, r4
 8000cda:	40b0      	lsls	r0, r6
 8000cdc:	4589      	cmp	r9, r1
 8000cde:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ce2:	b280      	uxth	r0, r0
 8000ce4:	d93e      	bls.n	8000d64 <__udivmoddi4+0x2e8>
 8000ce6:	1879      	adds	r1, r7, r1
 8000ce8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000cec:	d201      	bcs.n	8000cf2 <__udivmoddi4+0x276>
 8000cee:	4589      	cmp	r9, r1
 8000cf0:	d81f      	bhi.n	8000d32 <__udivmoddi4+0x2b6>
 8000cf2:	eba1 0109 	sub.w	r1, r1, r9
 8000cf6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cfa:	fb09 f804 	mul.w	r8, r9, r4
 8000cfe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d08:	4542      	cmp	r2, r8
 8000d0a:	d229      	bcs.n	8000d60 <__udivmoddi4+0x2e4>
 8000d0c:	18ba      	adds	r2, r7, r2
 8000d0e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d12:	d2c4      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d14:	4542      	cmp	r2, r8
 8000d16:	d2c2      	bcs.n	8000c9e <__udivmoddi4+0x222>
 8000d18:	f1a9 0102 	sub.w	r1, r9, #2
 8000d1c:	443a      	add	r2, r7
 8000d1e:	e7be      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d20:	45f0      	cmp	r8, lr
 8000d22:	d29d      	bcs.n	8000c60 <__udivmoddi4+0x1e4>
 8000d24:	ebbe 0302 	subs.w	r3, lr, r2
 8000d28:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d2c:	3801      	subs	r0, #1
 8000d2e:	46e1      	mov	r9, ip
 8000d30:	e796      	b.n	8000c60 <__udivmoddi4+0x1e4>
 8000d32:	eba7 0909 	sub.w	r9, r7, r9
 8000d36:	4449      	add	r1, r9
 8000d38:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d3c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d40:	fb09 f804 	mul.w	r8, r9, r4
 8000d44:	e7db      	b.n	8000cfe <__udivmoddi4+0x282>
 8000d46:	4673      	mov	r3, lr
 8000d48:	e77f      	b.n	8000c4a <__udivmoddi4+0x1ce>
 8000d4a:	4650      	mov	r0, sl
 8000d4c:	e766      	b.n	8000c1c <__udivmoddi4+0x1a0>
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e6fd      	b.n	8000b4e <__udivmoddi4+0xd2>
 8000d52:	443b      	add	r3, r7
 8000d54:	3a02      	subs	r2, #2
 8000d56:	e733      	b.n	8000bc0 <__udivmoddi4+0x144>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	443b      	add	r3, r7
 8000d5e:	e71c      	b.n	8000b9a <__udivmoddi4+0x11e>
 8000d60:	4649      	mov	r1, r9
 8000d62:	e79c      	b.n	8000c9e <__udivmoddi4+0x222>
 8000d64:	eba1 0109 	sub.w	r1, r1, r9
 8000d68:	46c4      	mov	ip, r8
 8000d6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d6e:	fb09 f804 	mul.w	r8, r9, r4
 8000d72:	e7c4      	b.n	8000cfe <__udivmoddi4+0x282>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d8a:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000d8c:	4a36      	ldr	r2, [pc, #216]	@ (8000e68 <MX_ADC1_Init+0xf0>)
 8000d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d90:	4b34      	ldr	r3, [pc, #208]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b33      	ldr	r3, [pc, #204]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d9c:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000da2:	4b30      	ldr	r3, [pc, #192]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000db8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e6c <MX_ADC1_Init+0xf4>)
 8000dba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd0:	4b24      	ldr	r3, [pc, #144]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	4823      	ldr	r0, [pc, #140]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000dd8:	f000 ff78 	bl	8001ccc <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fced 	bl	80017c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000dee:	2307      	movs	r3, #7
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	481b      	ldr	r0, [pc, #108]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000df8:	f001 f8bc 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e02:	f000 fcdd 	bl	80017c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4619      	mov	r1, r3
 8000e12:	4814      	ldr	r0, [pc, #80]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000e14:	f001 f8ae 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e1e:	f000 fccf 	bl	80017c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e22:	230b      	movs	r3, #11
 8000e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000e26:	2303      	movs	r3, #3
 8000e28:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000e30:	f001 f8a0 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e3a:	f000 fcc1 	bl	80017c0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e3e:	230c      	movs	r3, #12
 8000e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000e42:	2304      	movs	r3, #4
 8000e44:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e46:	463b      	mov	r3, r7
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <MX_ADC1_Init+0xec>)
 8000e4c:	f001 f892 	bl	8001f74 <HAL_ADC_ConfigChannel>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000e56:	f000 fcb3 	bl	80017c0 <Error_Handler>
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000084 	.word	0x20000084
 8000e68:	40012000 	.word	0x40012000
 8000e6c:	0f000001 	.word	0x0f000001

08000e70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	@ 0x28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f80 <HAL_ADC_MspInit+0x110>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d171      	bne.n	8000f76 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b3b      	ldr	r3, [pc, #236]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	4a3a      	ldr	r2, [pc, #232]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ea2:	4b38      	ldr	r3, [pc, #224]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a33      	ldr	r2, [pc, #204]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b2d      	ldr	r3, [pc, #180]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b2a      	ldr	r3, [pc, #168]	@ (8000f84 <HAL_ADC_MspInit+0x114>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = CHARGER1_IMON_Pin|CHARGER2_IMON_Pin;
 8000ee6:	2306      	movs	r3, #6
 8000ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eea:	2303      	movs	r3, #3
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4823      	ldr	r0, [pc, #140]	@ (8000f88 <HAL_ADC_MspInit+0x118>)
 8000efa:	f001 ff5d 	bl	8002db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BATTERY1_VOLTAGE_Pin|BATTERY2_VOLTAGE_Pin;
 8000efe:	2306      	movs	r3, #6
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481e      	ldr	r0, [pc, #120]	@ (8000f8c <HAL_ADC_MspInit+0x11c>)
 8000f12:	f001 ff51 	bl	8002db8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f16:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f18:	4a1e      	ldr	r2, [pc, #120]	@ (8000f94 <HAL_ADC_MspInit+0x124>)
 8000f1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f22:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b19      	ldr	r3, [pc, #100]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f36:	4b16      	ldr	r3, [pc, #88]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f3e:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f54:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f5a:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f5c:	f001 fbbc 	bl	80026d8 <HAL_DMA_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000f66:	f000 fc2b 	bl	80017c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f70:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <HAL_ADC_MspInit+0x120>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	@ 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40012000 	.word	0x40012000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	200000cc 	.word	0x200000cc
 8000f94:	40026410 	.word	0x40026410

08000f98 <calculateBatteryVoltage>:
 * @brief calculates battery voltage based on the averaged out value from the ADC
 *
 * @param battery
 * @return float calculated voltage
 */
uint16_t calculateBatteryVoltage(Battery* battery){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	calculateAverage(&(battery->adcRawVoltageReadingMovingAverage), battery->adcRawVoltageReading);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f103 0208 	add.w	r2, r3, #8
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	4619      	mov	r1, r3
 8000fac:	4610      	mov	r0, r2
 8000fae:	f000 fc0f 	bl	80017d0 <calculateAverage>
	battery->voltage_mV = 1000.0 * battery->adcRawVoltageReadingMovingAverage.average * U_REF / RESOLUTION * (R_UPPER + R_LOWER) / R_LOWER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff faac 	bl	8000514 <__aeabi_i2d>
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <calculateBatteryVoltage+0xb0>)
 8000fc2:	f7ff fb11 	bl	80005e8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	a318      	add	r3, pc, #96	@ (adr r3, 8001030 <calculateBatteryVoltage+0x98>)
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f7ff fb08 	bl	80005e8 <__aeabi_dmul>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f04f 0200 	mov.w	r2, #0
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <calculateBatteryVoltage+0xb4>)
 8000fe6:	f7ff fc29 	bl	800083c <__aeabi_ddiv>
 8000fea:	4602      	mov	r2, r0
 8000fec:	460b      	mov	r3, r1
 8000fee:	4610      	mov	r0, r2
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	a311      	add	r3, pc, #68	@ (adr r3, 8001038 <calculateBatteryVoltage+0xa0>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff faf6 	bl	80005e8 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4610      	mov	r0, r2
 8001002:	4619      	mov	r1, r3
 8001004:	a30e      	add	r3, pc, #56	@ (adr r3, 8001040 <calculateBatteryVoltage+0xa8>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff fc17 	bl	800083c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f7ff fcf9 	bl	8000a0c <__aeabi_d2uiz>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	809a      	strh	r2, [r3, #4]
	return battery->voltage_mV;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	889b      	ldrh	r3, [r3, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	66666666 	.word	0x66666666
 8001034:	400a6666 	.word	0x400a6666
 8001038:	00000000 	.word	0x00000000
 800103c:	40e4ff00 	.word	0x40e4ff00
 8001040:	00000000 	.word	0x00000000
 8001044:	40e01d00 	.word	0x40e01d00
 8001048:	408f4000 	.word	0x408f4000
 800104c:	40b00000 	.word	0x40b00000

08001050 <calculateBatteryChargingCurrent>:

uint16_t calculateBatteryChargingCurrent(Battery* battery){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	calculateAverage(&(battery->adcRawCurrentReadingMovingAverage), battery->adcRawCurrentReading);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	885b      	ldrh	r3, [r3, #2]
 8001062:	4619      	mov	r1, r3
 8001064:	4610      	mov	r0, r2
 8001066:	f000 fbb3 	bl	80017d0 <calculateAverage>
	battery->chargingCurrent_mA = 1000.0 * battery->adcRawCurrentReadingMovingAverage.average * U_REF / RESOLUTION / 20 / R_SHUNT;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa4f 	bl	8000514 <__aeabi_i2d>
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <calculateBatteryChargingCurrent+0xa8>)
 800107c:	f7ff fab4 	bl	80005e8 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4610      	mov	r0, r2
 8001086:	4619      	mov	r1, r3
 8001088:	a317      	add	r3, pc, #92	@ (adr r3, 80010e8 <calculateBatteryChargingCurrent+0x98>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff faab 	bl	80005e8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <calculateBatteryChargingCurrent+0xac>)
 80010a0:	f7ff fbcc 	bl	800083c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <calculateBatteryChargingCurrent+0xb0>)
 80010b2:	f7ff fbc3 	bl	800083c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	a30c      	add	r3, pc, #48	@ (adr r3, 80010f0 <calculateBatteryChargingCurrent+0xa0>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	f7ff fbba 	bl	800083c <__aeabi_ddiv>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fc9c 	bl	8000a0c <__aeabi_d2uiz>
 80010d4:	4603      	mov	r3, r0
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	80da      	strh	r2, [r3, #6]
	return battery->voltage_mV;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	889b      	ldrh	r3, [r3, #4]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	66666666 	.word	0x66666666
 80010ec:	400a6666 	.word	0x400a6666
 80010f0:	9999999a 	.word	0x9999999a
 80010f4:	3f999999 	.word	0x3f999999
 80010f8:	408f4000 	.word	0x408f4000
 80010fc:	40b00000 	.word	0x40b00000
 8001100:	40340000 	.word	0x40340000

08001104 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_DMA_Init+0x3c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	4a0b      	ldr	r2, [pc, #44]	@ (8001140 <MX_DMA_Init+0x3c>)
 8001114:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001118:	6313      	str	r3, [r2, #48]	@ 0x30
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_DMA_Init+0x3c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001126:	2200      	movs	r2, #0
 8001128:	2100      	movs	r1, #0
 800112a:	2038      	movs	r0, #56	@ 0x38
 800112c:	f001 fa9d 	bl	800266a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001130:	2038      	movs	r0, #56	@ 0x38
 8001132:	f001 fab6 	bl	80026a2 <HAL_NVIC_EnableIRQ>

}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800

08001144 <checkPowerGoodSignals>:
 * @brief Checks the status of power good signals.
 *
 * @param pg Pointer to a PowerGood structure where the signal status will be stored.
 * @return uint8_t Bitmask indicating the status of the signals.
 */
uint8_t checkPowerGoodSignals(PowerGood* pg) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	uint8_t status = POWER_GOOD_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

	pg->charger_1 = HAL_GPIO_ReadPin(POWER_GOOD_CHARGER1_GPIO_Port, POWER_GOOD_CHARGER1_Pin);
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	4822      	ldr	r0, [pc, #136]	@ (80011dc <checkPowerGoodSignals+0x98>)
 8001154:	f001 ffcc 	bl	80030f0 <HAL_GPIO_ReadPin>
 8001158:	4603      	mov	r3, r0
 800115a:	461a      	mov	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	701a      	strb	r2, [r3, #0]
	if (!pg->charger_1) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d103      	bne.n	8001170 <checkPowerGoodSignals+0x2c>
		status |= POWER_GOOD_CHARGER1_FAIL;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
	}

	pg->charger_2 = HAL_GPIO_ReadPin(POWER_GOOD_CHARGER2_GPIO_Port, POWER_GOOD_CHARGER2_Pin);
 8001170:	2180      	movs	r1, #128	@ 0x80
 8001172:	481a      	ldr	r0, [pc, #104]	@ (80011dc <checkPowerGoodSignals+0x98>)
 8001174:	f001 ffbc 	bl	80030f0 <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	705a      	strb	r2, [r3, #1]
	if (!pg->charger_2) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <checkPowerGoodSignals+0x4c>
		status |= POWER_GOOD_CHARGER2_FAIL;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	f043 0302 	orr.w	r3, r3, #2
 800118e:	73fb      	strb	r3, [r7, #15]
	}

	pg->converter_5V = HAL_GPIO_ReadPin(POWER_GOOD_5V_GPIO_Port, POWER_GOOD_5V_Pin);
 8001190:	2102      	movs	r1, #2
 8001192:	4812      	ldr	r0, [pc, #72]	@ (80011dc <checkPowerGoodSignals+0x98>)
 8001194:	f001 ffac 	bl	80030f0 <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	709a      	strb	r2, [r3, #2]
	if (!pg->converter_5V) {
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	789b      	ldrb	r3, [r3, #2]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <checkPowerGoodSignals+0x6c>
		status |= POWER_GOOD_5V_FAIL;
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	73fb      	strb	r3, [r7, #15]
	}

	pg->converter_3V3 = HAL_GPIO_ReadPin(POWER_GOOD_3V3_GPIO_Port, POWER_GOOD_3V3_Pin);
 80011b0:	2110      	movs	r1, #16
 80011b2:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <checkPowerGoodSignals+0x9c>)
 80011b4:	f001 ff9c 	bl	80030f0 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	70da      	strb	r2, [r3, #3]
	if (!pg->converter_3V3) {
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d103      	bne.n	80011d0 <checkPowerGoodSignals+0x8c>
		status |= POWER_GOOD_3V3_FAIL;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800

080011e4 <handlePowerGoodErrors>:
/**
 * @brief Handles errors based on the power good status bitmask.
 *
 * @param status Bitmask indicating which power good signals have failed.
 */
void handlePowerGoodErrors(EPS* eps){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (eps->powerStatus == POWER_GOOD_OK) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	791b      	ldrb	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d106      	bne.n	8001202 <handlePowerGoodErrors+0x1e>
		setLedPattern(&(eps->led), LED_BLINK_SLOW);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	33f0      	adds	r3, #240	@ 0xf0
 80011f8:	2102      	movs	r1, #2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f936 	bl	800146c <setLedPattern>
		return;
 8001200:	e02f      	b.n	8001262 <handlePowerGoodErrors+0x7e>
	}

	if (eps->powerStatus & POWER_GOOD_CHARGER1_FAIL) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d005      	beq.n	800121a <handlePowerGoodErrors+0x36>
		setLedPattern(&(eps->led), LED_BLINK_BURST);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	33f0      	adds	r3, #240	@ 0xf0
 8001212:	2104      	movs	r1, #4
 8001214:	4618      	mov	r0, r3
 8001216:	f000 f929 	bl	800146c <setLedPattern>
	}

	if (eps->powerStatus & POWER_GOOD_CHARGER2_FAIL) {
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	791b      	ldrb	r3, [r3, #4]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <handlePowerGoodErrors+0x4e>
		setLedPattern(&(eps->led), LED_BLINK_BURST);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	33f0      	adds	r3, #240	@ 0xf0
 800122a:	2104      	movs	r1, #4
 800122c:	4618      	mov	r0, r3
 800122e:	f000 f91d 	bl	800146c <setLedPattern>
	}

	if (eps->powerStatus & POWER_GOOD_5V_FAIL) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	791b      	ldrb	r3, [r3, #4]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d005      	beq.n	800124a <handlePowerGoodErrors+0x66>
		setLedPattern(&(eps->led), LED_BLINK_FAST);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	33f0      	adds	r3, #240	@ 0xf0
 8001242:	2103      	movs	r1, #3
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f911 	bl	800146c <setLedPattern>
	}

	if (eps->powerStatus & POWER_GOOD_3V3_FAIL) {
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	791b      	ldrb	r3, [r3, #4]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <handlePowerGoodErrors+0x7e>
		setLedPattern(&(eps->led), LED_BLINK_FAST);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	33f0      	adds	r3, #240	@ 0xf0
 800125a:	2103      	movs	r1, #3
 800125c:	4618      	mov	r0, r3
 800125e:	f000 f905 	bl	800146c <setLedPattern>
	}
}
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <deployAntenna>:

void deployAntenna(){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2104      	movs	r1, #4
 8001270:	480c      	ldr	r0, [pc, #48]	@ (80012a4 <deployAntenna+0x3c>)
 8001272:	f001 ff55 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER_SWITCH2_GPIO_Port, POWER_SWITCH2_Pin, GPIO_PIN_SET);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800127c:	480a      	ldr	r0, [pc, #40]	@ (80012a8 <deployAntenna+0x40>)
 800127e:	f001 ff4f 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8001282:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001286:	f000 fcfd 	bl	8001c84 <HAL_Delay>
	HAL_GPIO_WritePin(POWER_SWITCH2_GPIO_Port, POWER_SWITCH2_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001290:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <deployAntenna+0x40>)
 8001292:	f001 ff45 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2104      	movs	r1, #4
 800129a:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <deployAntenna+0x3c>)
 800129c:	f001 ff40 	bl	8003120 <HAL_GPIO_WritePin>
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40020400 	.word	0x40020400

080012ac <deploySolarPanels>:
void deploySolarPanels(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2104      	movs	r1, #4
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <deploySolarPanels+0x3c>)
 80012b6:	f001 ff33 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER_SWITCH1_GPIO_Port, POWER_SWITCH1_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012c0:	480a      	ldr	r0, [pc, #40]	@ (80012ec <deploySolarPanels+0x40>)
 80012c2:	f001 ff2d 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 80012c6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012ca:	f000 fcdb 	bl	8001c84 <HAL_Delay>
	HAL_GPIO_WritePin(POWER_SWITCH1_GPIO_Port, POWER_SWITCH1_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012d4:	4805      	ldr	r0, [pc, #20]	@ (80012ec <deploySolarPanels+0x40>)
 80012d6:	f001 ff23 	bl	8003120 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80012da:	2200      	movs	r2, #0
 80012dc:	2104      	movs	r1, #4
 80012de:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <deploySolarPanels+0x3c>)
 80012e0:	f001 ff1e 	bl	8003120 <HAL_GPIO_WritePin>
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40020400 	.word	0x40020400

080012f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b54      	ldr	r3, [pc, #336]	@ (800145c <MX_GPIO_Init+0x16c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a53      	ldr	r2, [pc, #332]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b51      	ldr	r3, [pc, #324]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b4d      	ldr	r3, [pc, #308]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a4c      	ldr	r2, [pc, #304]	@ (800145c <MX_GPIO_Init+0x16c>)
 800132c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b4a      	ldr	r3, [pc, #296]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b46      	ldr	r3, [pc, #280]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a45      	ldr	r2, [pc, #276]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b43      	ldr	r3, [pc, #268]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b3f      	ldr	r3, [pc, #252]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a3e      	ldr	r2, [pc, #248]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001364:	f043 0302 	orr.w	r3, r3, #2
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b3c      	ldr	r3, [pc, #240]	@ (800145c <MX_GPIO_Init+0x16c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	4b38      	ldr	r3, [pc, #224]	@ (800145c <MX_GPIO_Init+0x16c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a37      	ldr	r2, [pc, #220]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b35      	ldr	r3, [pc, #212]	@ (800145c <MX_GPIO_Init+0x16c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHARGER_SYNC_Pin|MODE_3V3_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2128      	movs	r1, #40	@ 0x28
 8001396:	4832      	ldr	r0, [pc, #200]	@ (8001460 <MX_GPIO_Init+0x170>)
 8001398:	f001 fec2 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MODE_5V_Pin|POWER_SWITCH2_Pin|POWER_SWITCH1_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	f246 0104 	movw	r1, #24580	@ 0x6004
 80013a2:	4830      	ldr	r0, [pc, #192]	@ (8001464 <MX_GPIO_Init+0x174>)
 80013a4:	f001 febc 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2104      	movs	r1, #4
 80013ac:	482e      	ldr	r0, [pc, #184]	@ (8001468 <MX_GPIO_Init+0x178>)
 80013ae:	f001 feb7 	bl	8003120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_BUTTON_0_Pin|USER_BUTTON_1_Pin;
 80013b2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	4826      	ldr	r0, [pc, #152]	@ (8001460 <MX_GPIO_Init+0x170>)
 80013c8:	f001 fcf6 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHARGER_SYNC_Pin|MODE_3V3_Pin;
 80013cc:	2328      	movs	r3, #40	@ 0x28
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	481f      	ldr	r0, [pc, #124]	@ (8001460 <MX_GPIO_Init+0x170>)
 80013e4:	f001 fce8 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POWER_GOOD_3V3_Pin;
 80013e8:	2310      	movs	r3, #16
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(POWER_GOOD_3V3_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4819      	ldr	r0, [pc, #100]	@ (8001460 <MX_GPIO_Init+0x170>)
 80013fc:	f001 fcdc 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = POWER_GOOD_5V_Pin|POWER_GOOD_CHARGER1_Pin|POWER_GOOD_CHARGER2_Pin;
 8001400:	23c2      	movs	r3, #194	@ 0xc2
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001408:	2301      	movs	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4814      	ldr	r0, [pc, #80]	@ (8001464 <MX_GPIO_Init+0x174>)
 8001414:	f001 fcd0 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MODE_5V_Pin|POWER_SWITCH2_Pin|POWER_SWITCH1_Pin;
 8001418:	f246 0304 	movw	r3, #24580	@ 0x6004
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <MX_GPIO_Init+0x174>)
 8001432:	f001 fcc1 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001436:	2304      	movs	r3, #4
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4806      	ldr	r0, [pc, #24]	@ (8001468 <MX_GPIO_Init+0x178>)
 800144e:	f001 fcb3 	bl	8002db8 <HAL_GPIO_Init>

}
 8001452:	bf00      	nop
 8001454:	3728      	adds	r7, #40	@ 0x28
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800
 8001464:	40020400 	.word	0x40020400
 8001468:	40020c00 	.word	0x40020c00

0800146c <setLedPattern>:
 */

#include "led.h"
#include "main.h"

void setLedPattern(LED *led, LED_State state) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	70fb      	strb	r3, [r7, #3]
    led->state = state;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	78fa      	ldrb	r2, [r7, #3]
 800147c:	701a      	strb	r2, [r3, #0]
    //led->last_toggle_tick = HAL_GetTick();

    switch (state) {
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d83d      	bhi.n	8001500 <setLedPattern+0x94>
 8001484:	a201      	add	r2, pc, #4	@ (adr r2, 800148c <setLedPattern+0x20>)
 8001486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148a:	bf00      	nop
 800148c:	080014a1 	.word	0x080014a1
 8001490:	080014b9 	.word	0x080014b9
 8001494:	080014d1 	.word	0x080014d1
 8001498:	080014e3 	.word	0x080014e3
 800149c:	080014f1 	.word	0x080014f1
        case LED_OFF:
            led->on_time = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
            led->off_time = 0;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
            HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2104      	movs	r1, #4
 80014b0:	4815      	ldr	r0, [pc, #84]	@ (8001508 <setLedPattern+0x9c>)
 80014b2:	f001 fe35 	bl	8003120 <HAL_GPIO_WritePin>
            break;
 80014b6:	e023      	b.n	8001500 <setLedPattern+0x94>
        case LED_ON:
            led->on_time = 0;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
            led->off_time = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	60da      	str	r2, [r3, #12]
            HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2104      	movs	r1, #4
 80014c8:	480f      	ldr	r0, [pc, #60]	@ (8001508 <setLedPattern+0x9c>)
 80014ca:	f001 fe29 	bl	8003120 <HAL_GPIO_WritePin>
            break;
 80014ce:	e017      	b.n	8001500 <setLedPattern+0x94>
        case LED_BLINK_SLOW:
            led->on_time = 500;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014d6:	609a      	str	r2, [r3, #8]
            led->off_time = 500;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014de:	60da      	str	r2, [r3, #12]
            break;
 80014e0:	e00e      	b.n	8001500 <setLedPattern+0x94>
        case LED_BLINK_FAST:
            led->on_time = 100;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2264      	movs	r2, #100	@ 0x64
 80014e6:	609a      	str	r2, [r3, #8]
            led->off_time = 100;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2264      	movs	r2, #100	@ 0x64
 80014ec:	60da      	str	r2, [r3, #12]
            break;
 80014ee:	e007      	b.n	8001500 <setLedPattern+0x94>
        case LED_BLINK_BURST:
			led->on_time = 50;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2232      	movs	r2, #50	@ 0x32
 80014f4:	609a      	str	r2, [r3, #8]
			led->off_time = 1000;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014fc:	60da      	str	r2, [r3, #12]
			break;
 80014fe:	bf00      	nop
    }
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020c00 	.word	0x40020c00

0800150c <updateLed>:

void updateLed(LED *led) {
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    uint32_t elapsed = HAL_GetTick() - led->last_toggle_tick;
 8001514:	f000 fbaa 	bl	8001c6c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	60fb      	str	r3, [r7, #12]

    if (led->state == LED_ON || led->state == LED_OFF) {
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d02a      	beq.n	8001580 <updateLed+0x74>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d026      	beq.n	8001580 <updateLed+0x74>
        return; // No need to update if LED is constantly on or off
    }

    if (HAL_GPIO_ReadPin(USER_LED_GPIO_Port, USER_LED_Pin) == GPIO_PIN_SET) {
 8001532:	2104      	movs	r1, #4
 8001534:	4814      	ldr	r0, [pc, #80]	@ (8001588 <updateLed+0x7c>)
 8001536:	f001 fddb 	bl	80030f0 <HAL_GPIO_ReadPin>
 800153a:	4603      	mov	r3, r0
 800153c:	2b01      	cmp	r3, #1
 800153e:	d10f      	bne.n	8001560 <updateLed+0x54>
        // LED is currently on
        if (elapsed >= led->on_time) {
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	429a      	cmp	r2, r3
 8001548:	d31b      	bcc.n	8001582 <updateLed+0x76>
            HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	2104      	movs	r1, #4
 800154e:	480e      	ldr	r0, [pc, #56]	@ (8001588 <updateLed+0x7c>)
 8001550:	f001 fde6 	bl	8003120 <HAL_GPIO_WritePin>
            led->last_toggle_tick = HAL_GetTick();
 8001554:	f000 fb8a 	bl	8001c6c <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	e010      	b.n	8001582 <updateLed+0x76>
        }
    } else {
        // LED is currently off
        if (elapsed >= led->off_time) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	429a      	cmp	r2, r3
 8001568:	d30b      	bcc.n	8001582 <updateLed+0x76>
            HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 800156a:	2201      	movs	r2, #1
 800156c:	2104      	movs	r1, #4
 800156e:	4806      	ldr	r0, [pc, #24]	@ (8001588 <updateLed+0x7c>)
 8001570:	f001 fdd6 	bl	8003120 <HAL_GPIO_WritePin>
            led->last_toggle_tick = HAL_GetTick();
 8001574:	f000 fb7a 	bl	8001c6c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	e000      	b.n	8001582 <updateLed+0x76>
        return; // No need to update if LED is constantly on or off
 8001580:	bf00      	nop
        }
    }
}
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40020c00 	.word	0x40020c00

0800158c <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/**
 * @brief function for printing using UART
 */
int _write(int file, char* ptr, int len){
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	b29a      	uxth	r2, r3
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <_write+0x28>)
 80015a4:	f002 fab1 	bl	8003b0a <HAL_UART_Transmit>
	return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000238 	.word	0x20000238

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 faef 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 f893 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f7ff fe93 	bl	80012f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ca:	f7ff fd9b 	bl	8001104 <MX_DMA_Init>
  MX_ADC1_Init();
 80015ce:	f7ff fbd3 	bl	8000d78 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80015d2:	f000 fa49 	bl	8001a68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_raw_values, 4);
 80015d6:	2204      	movs	r2, #4
 80015d8:	493c      	ldr	r1, [pc, #240]	@ (80016cc <main+0x114>)
 80015da:	483d      	ldr	r0, [pc, #244]	@ (80016d0 <main+0x118>)
 80015dc:	f000 fbba 	bl	8001d54 <HAL_ADC_Start_DMA>
  setLedPattern(&(eps.led), LED_BLINK_SLOW);  // Example pattern
 80015e0:	2102      	movs	r1, #2
 80015e2:	483c      	ldr	r0, [pc, #240]	@ (80016d4 <main+0x11c>)
 80015e4:	f7ff ff42 	bl	800146c <setLedPattern>

  eps.powerStatus = 0x00;
 80015e8:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <main+0x120>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(10000);
 80015ee:	f242 7010 	movw	r0, #10000	@ 0x2710
 80015f2:	f000 fb47 	bl	8001c84 <HAL_Delay>
  deploySolarPanels();
 80015f6:	f7ff fe59 	bl	80012ac <deploySolarPanels>
  HAL_Delay(5000);
 80015fa:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015fe:	f000 fb41 	bl	8001c84 <HAL_Delay>
  deployAntenna();
 8001602:	f7ff fe31 	bl	8001268 <deployAntenna>
  while (1){
	  eps.battery1.adcRawVoltageReading = adc_raw_values[0];
 8001606:	4b31      	ldr	r3, [pc, #196]	@ (80016cc <main+0x114>)
 8001608:	881a      	ldrh	r2, [r3, #0]
 800160a:	4b33      	ldr	r3, [pc, #204]	@ (80016d8 <main+0x120>)
 800160c:	811a      	strh	r2, [r3, #8]
	  eps.battery2.adcRawVoltageReading = adc_raw_values[1];
 800160e:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <main+0x114>)
 8001610:	885a      	ldrh	r2, [r3, #2]
 8001612:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <main+0x120>)
 8001614:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
	  eps.battery1.adcRawCurrentReading = adc_raw_values[2];
 8001618:	4b2c      	ldr	r3, [pc, #176]	@ (80016cc <main+0x114>)
 800161a:	889a      	ldrh	r2, [r3, #4]
 800161c:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <main+0x120>)
 800161e:	815a      	strh	r2, [r3, #10]
	  eps.battery2.adcRawCurrentReading = adc_raw_values[3];
 8001620:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <main+0x114>)
 8001622:	88da      	ldrh	r2, [r3, #6]
 8001624:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <main+0x120>)
 8001626:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

	  calculateBatteryVoltage(&(eps.battery1));
 800162a:	482c      	ldr	r0, [pc, #176]	@ (80016dc <main+0x124>)
 800162c:	f7ff fcb4 	bl	8000f98 <calculateBatteryVoltage>
	  calculateBatteryVoltage(&(eps.battery2));
 8001630:	482b      	ldr	r0, [pc, #172]	@ (80016e0 <main+0x128>)
 8001632:	f7ff fcb1 	bl	8000f98 <calculateBatteryVoltage>
	  calculateBatteryChargingCurrent(&(eps.battery1));
 8001636:	4829      	ldr	r0, [pc, #164]	@ (80016dc <main+0x124>)
 8001638:	f7ff fd0a 	bl	8001050 <calculateBatteryChargingCurrent>
	  calculateBatteryChargingCurrent(&(eps.battery2));
 800163c:	4828      	ldr	r0, [pc, #160]	@ (80016e0 <main+0x128>)
 800163e:	f7ff fd07 	bl	8001050 <calculateBatteryChargingCurrent>

	  eps.powerStatus = checkPowerGoodSignals(&(eps.powerGoodSignals));
 8001642:	4825      	ldr	r0, [pc, #148]	@ (80016d8 <main+0x120>)
 8001644:	f7ff fd7e 	bl	8001144 <checkPowerGoodSignals>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	4b22      	ldr	r3, [pc, #136]	@ (80016d8 <main+0x120>)
 800164e:	711a      	strb	r2, [r3, #4]
	  handlePowerGoodErrors(&eps);
 8001650:	4821      	ldr	r0, [pc, #132]	@ (80016d8 <main+0x120>)
 8001652:	f7ff fdc7 	bl	80011e4 <handlePowerGoodErrors>

	  if(!HAL_GPIO_ReadPin(USER_BUTTON_0_GPIO_Port, USER_BUTTON_0_Pin)){
 8001656:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800165a:	4822      	ldr	r0, [pc, #136]	@ (80016e4 <main+0x12c>)
 800165c:	f001 fd48 	bl	80030f0 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <main+0xba>
		  deploySolarPanels();
 8001666:	f7ff fe21 	bl	80012ac <deploySolarPanels>
		  setLedPattern(&(eps.led), LED_BLINK_FAST);
 800166a:	2103      	movs	r1, #3
 800166c:	4819      	ldr	r0, [pc, #100]	@ (80016d4 <main+0x11c>)
 800166e:	f7ff fefd 	bl	800146c <setLedPattern>
	  }
	  if(!HAL_GPIO_ReadPin(USER_BUTTON_1_GPIO_Port, USER_BUTTON_1_Pin)){
 8001672:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001676:	481b      	ldr	r0, [pc, #108]	@ (80016e4 <main+0x12c>)
 8001678:	f001 fd3a 	bl	80030f0 <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d105      	bne.n	800168e <main+0xd6>
		  deployAntenna();
 8001682:	f7ff fdf1 	bl	8001268 <deployAntenna>
		  setLedPattern(&(eps.led), LED_BLINK_BURST);
 8001686:	2104      	movs	r1, #4
 8001688:	4812      	ldr	r0, [pc, #72]	@ (80016d4 <main+0x11c>)
 800168a:	f7ff feef 	bl	800146c <setLedPattern>
	  }
	  printf("%d; %d; %d; %d; %d \n\r", eps.battery1.voltage_mV, eps.battery2.voltage_mV, eps.battery1.chargingCurrent_mA, eps.battery2.chargingCurrent_mA, eps.powerStatus);
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <main+0x120>)
 8001690:	899b      	ldrh	r3, [r3, #12]
 8001692:	4619      	mov	r1, r3
 8001694:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <main+0x120>)
 8001696:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800169a:	4618      	mov	r0, r3
 800169c:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <main+0x120>)
 800169e:	89db      	ldrh	r3, [r3, #14]
 80016a0:	461c      	mov	r4, r3
 80016a2:	4b0d      	ldr	r3, [pc, #52]	@ (80016d8 <main+0x120>)
 80016a4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <main+0x120>)
 80016ac:	791b      	ldrb	r3, [r3, #4]
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	9200      	str	r2, [sp, #0]
 80016b2:	4623      	mov	r3, r4
 80016b4:	4602      	mov	r2, r0
 80016b6:	480c      	ldr	r0, [pc, #48]	@ (80016e8 <main+0x130>)
 80016b8:	f003 f89c 	bl	80047f4 <iprintf>
	  updateLed(&(eps.led));
 80016bc:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <main+0x11c>)
 80016be:	f7ff ff25 	bl	800150c <updateLed>
	  HAL_Delay(10);
 80016c2:	200a      	movs	r0, #10
 80016c4:	f000 fade 	bl	8001c84 <HAL_Delay>
	  eps.battery1.adcRawVoltageReading = adc_raw_values[0];
 80016c8:	e79d      	b.n	8001606 <main+0x4e>
 80016ca:	bf00      	nop
 80016cc:	2000012c 	.word	0x2000012c
 80016d0:	20000084 	.word	0x20000084
 80016d4:	20000224 	.word	0x20000224
 80016d8:	20000134 	.word	0x20000134
 80016dc:	2000013c 	.word	0x2000013c
 80016e0:	200001b0 	.word	0x200001b0
 80016e4:	40020800 	.word	0x40020800
 80016e8:	080054e4 	.word	0x080054e4

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b094      	sub	sp, #80	@ 0x50
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	2230      	movs	r2, #48	@ 0x30
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f003 f8cf 	bl	800489e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	4b28      	ldr	r3, [pc, #160]	@ (80017b8 <SystemClock_Config+0xcc>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a27      	ldr	r2, [pc, #156]	@ (80017b8 <SystemClock_Config+0xcc>)
 800171a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001720:	4b25      	ldr	r3, [pc, #148]	@ (80017b8 <SystemClock_Config+0xcc>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	4b22      	ldr	r3, [pc, #136]	@ (80017bc <SystemClock_Config+0xd0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <SystemClock_Config+0xd0>)
 8001736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <SystemClock_Config+0xd0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001748:	2301      	movs	r3, #1
 800174a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2302      	movs	r3, #2
 8001754:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001756:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800175c:	2304      	movs	r3, #4
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001760:	2360      	movs	r3, #96	@ 0x60
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001764:	2302      	movs	r3, #2
 8001766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001768:	2304      	movs	r3, #4
 800176a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0320 	add.w	r3, r7, #32
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fcef 	bl	8003154 <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800177c:	f000 f820 	bl	80017c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001784:	2302      	movs	r3, #2
 8001786:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001788:	2380      	movs	r3, #128	@ 0x80
 800178a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800178c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001790:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001798:	f107 030c 	add.w	r3, r7, #12
 800179c:	2101      	movs	r1, #1
 800179e:	4618      	mov	r0, r3
 80017a0:	f001 ff46 	bl	8003630 <HAL_RCC_ClockConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017aa:	f000 f809 	bl	80017c0 <Error_Handler>
  }
}
 80017ae:	bf00      	nop
 80017b0:	3750      	adds	r7, #80	@ 0x50
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000

080017c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <calculateAverage>:
 *
 * @param mvngAverage
 * @param reading value that is being averaged out
 * @return uint16_t averaged value
 */
uint16_t calculateAverage(MovingAverage * mvngAverage, uint16_t reading){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
	mvngAverage->total -= mvngAverage->readings[mvngAverage->readIndex];    //subtract the last reading:
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80017e6:	4611      	mov	r1, r2
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80017ee:	1a9a      	subs	r2, r3, r2
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	mvngAverage->readings[mvngAverage->readIndex] = reading;      			//read from the sensor:
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80017fa:	4619      	mov	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	887a      	ldrh	r2, [r7, #2]
 8001800:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	mvngAverage->total += mvngAverage->readings[mvngAverage->readIndex];    //add the reading to the total:
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 800180e:	4611      	mov	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001816:	441a      	add	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	62da      	str	r2, [r3, #44]	@ 0x2c
	++mvngAverage->readIndex;                        						//advance to the next position in the array:
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001822:	3301      	adds	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	if (mvngAverage->readIndex >= NUM_OF_READINGS)   						//if we're at the end of the array...
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001832:	2b13      	cmp	r3, #19
 8001834:	d903      	bls.n	800183e <calculateAverage+0x6e>
		mvngAverage->readIndex = 0;                   						//...wrap around to the beginning:
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	mvngAverage->average = mvngAverage->total / NUM_OF_READINGS;  			//calculate the average:
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <calculateAverage+0x90>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	861a      	strh	r2, [r3, #48]	@ 0x30
	return mvngAverage->average;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	cccccccd 	.word	0xcccccccd

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001872:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001878:	6453      	str	r3, [r2, #68]	@ 0x44
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_MspInit+0x4c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	603b      	str	r3, [r7, #0]
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_MspInit+0x4c>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	4a08      	ldr	r2, [pc, #32]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001894:	6413      	str	r3, [r2, #64]	@ 0x40
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_MspInit+0x4c>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	603b      	str	r3, [r7, #0]
 80018a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c6:	bf00      	nop
 80018c8:	e7fd      	b.n	80018c6 <HardFault_Handler+0x4>

080018ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ce:	bf00      	nop
 80018d0:	e7fd      	b.n	80018ce <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	bf00      	nop
 80018d8:	e7fd      	b.n	80018d6 <BusFault_Handler+0x4>

080018da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018de:	bf00      	nop
 80018e0:	e7fd      	b.n	80018de <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 f998 	bl	8001c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800191c:	4802      	ldr	r0, [pc, #8]	@ (8001928 <DMA2_Stream0_IRQHandler+0x10>)
 800191e:	f000 ffe1 	bl	80028e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	200000cc 	.word	0x200000cc

0800192c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	e00a      	b.n	8001954 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193e:	f3af 8000 	nop.w
 8001942:	4601      	mov	r1, r0
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	1c5a      	adds	r2, r3, #1
 8001948:	60ba      	str	r2, [r7, #8]
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3301      	adds	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	429a      	cmp	r2, r3
 800195a:	dbf0      	blt.n	800193e <_read+0x12>
	}

return len;
 800195c:	687b      	ldr	r3, [r7, #4]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
	return -1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800198e:	605a      	str	r2, [r3, #4]
	return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_isatty>:

int _isatty(int file)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
	return 1;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
	...

080019d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d8:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <_sbrk+0x5c>)
 80019da:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <_sbrk+0x60>)
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <_sbrk+0x64>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d102      	bne.n	80019f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019ec:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <_sbrk+0x64>)
 80019ee:	4a12      	ldr	r2, [pc, #72]	@ (8001a38 <_sbrk+0x68>)
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019f2:	4b10      	ldr	r3, [pc, #64]	@ (8001a34 <_sbrk+0x64>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4413      	add	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d207      	bcs.n	8001a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a00:	f002 ff9c 	bl	800493c <__errno>
 8001a04:	4603      	mov	r3, r0
 8001a06:	220c      	movs	r2, #12
 8001a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0e:	e009      	b.n	8001a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a05      	ldr	r2, [pc, #20]	@ (8001a34 <_sbrk+0x64>)
 8001a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20020000 	.word	0x20020000
 8001a30:	00000400 	.word	0x00000400
 8001a34:	20000234 	.word	0x20000234
 8001a38:	200003c8 	.word	0x200003c8

08001a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a40:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <SystemInit+0x28>)
 8001a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a46:	4a07      	ldr	r2, [pc, #28]	@ (8001a64 <SystemInit+0x28>)
 8001a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <SystemInit+0x28>)
 8001a52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a56:	609a      	str	r2, [r3, #8]
#endif
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <MX_USART3_UART_Init+0x50>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USART3_UART_Init+0x4c>)
 8001aa0:	f001 ffe6 	bl	8003a70 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f7ff fe89 	bl	80017c0 <Error_Handler>
  }

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000238 	.word	0x20000238
 8001ab8:	40004800 	.word	0x40004800

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a19      	ldr	r2, [pc, #100]	@ (8001b40 <HAL_UART_MspInit+0x84>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12c      	bne.n	8001b38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <HAL_UART_MspInit+0x88>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <HAL_UART_MspInit+0x88>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <HAL_UART_MspInit+0x88>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <HAL_UART_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <HAL_UART_MspInit+0x88>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <HAL_UART_MspInit+0x88>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b28:	2307      	movs	r3, #7
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4805      	ldr	r0, [pc, #20]	@ (8001b48 <HAL_UART_MspInit+0x8c>)
 8001b34:	f001 f940 	bl	8002db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	@ 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40004800 	.word	0x40004800
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020400 	.word	0x40020400

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b52:	e003      	b.n	8001b5c <LoopCopyDataInit>

08001b54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b5a:	3104      	adds	r1, #4

08001b5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b5c:	480b      	ldr	r0, [pc, #44]	@ (8001b8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b64:	d3f6      	bcc.n	8001b54 <CopyDataInit>
  ldr  r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	@ (8001b94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b68:	e002      	b.n	8001b70 <LoopFillZerobss>

08001b6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b6c:	f842 3b04 	str.w	r3, [r2], #4

08001b70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b74:	d3f9      	bcc.n	8001b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b76:	f7ff ff61 	bl	8001a3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f002 fee5 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff fd1b 	bl	80015b8 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b88:	08005560 	.word	0x08005560
  ldr  r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b90:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8001b94:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8001b98:	200003c8 	.word	0x200003c8

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_Init+0x40>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <HAL_Init+0x40>)
 8001baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_Init+0x40>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_Init+0x40>)
 8001bb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_Init+0x40>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a07      	ldr	r2, [pc, #28]	@ (8001be0 <HAL_Init+0x40>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f000 fd43 	bl	8002654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 f808 	bl	8001be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bd4:	f7ff fe46 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b12      	ldr	r3, [pc, #72]	@ (8001c38 <HAL_InitTick+0x54>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_InitTick+0x58>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 fd5b 	bl	80026be <HAL_SYSTICK_Config>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e00e      	b.n	8001c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b0f      	cmp	r3, #15
 8001c16:	d80a      	bhi.n	8001c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	f000 fd23 	bl	800266a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c24:	4a06      	ldr	r2, [pc, #24]	@ (8001c40 <HAL_InitTick+0x5c>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000008 	.word	0x20000008
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_IncTick+0x20>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	4a04      	ldr	r2, [pc, #16]	@ (8001c68 <HAL_IncTick+0x24>)
 8001c56:	6013      	str	r3, [r2, #0]
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000278 	.word	0x20000278

08001c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b03      	ldr	r3, [pc, #12]	@ (8001c80 <HAL_GetTick+0x14>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000278 	.word	0x20000278

08001c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c8c:	f7ff ffee 	bl	8001c6c <HAL_GetTick>
 8001c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9c:	d005      	beq.n	8001caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_Delay+0x44>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001caa:	bf00      	nop
 8001cac:	f7ff ffde 	bl	8001c6c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d8f7      	bhi.n	8001cac <HAL_Delay+0x28>
  {
  }
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008

08001ccc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e033      	b.n	8001d4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7ff f8c0 	bl	8000e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d12:	f023 0302 	bic.w	r3, r3, #2
 8001d16:	f043 0202 	orr.w	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 fa4a 	bl	80021b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f023 0303 	bic.w	r3, r3, #3
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d3a:	e001      	b.n	8001d40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_Start_DMA+0x1e>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e0cc      	b.n	8001f0c <HAL_ADC_Start_DMA+0x1b8>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d018      	beq.n	8001dba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d98:	4b5e      	ldr	r3, [pc, #376]	@ (8001f14 <HAL_ADC_Start_DMA+0x1c0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a5e      	ldr	r2, [pc, #376]	@ (8001f18 <HAL_ADC_Start_DMA+0x1c4>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	0c9a      	lsrs	r2, r3, #18
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f040 80a0 	bne.w	8001f0a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001df4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e08:	d106      	bne.n	8001e18 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f023 0206 	bic.w	r2, r3, #6
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e16:	e002      	b.n	8001e1e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e26:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <HAL_ADC_Start_DMA+0x1c8>)
 8001e28:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f20 <HAL_ADC_Start_DMA+0x1cc>)
 8001e30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e36:	4a3b      	ldr	r2, [pc, #236]	@ (8001f24 <HAL_ADC_Start_DMA+0x1d0>)
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f28 <HAL_ADC_Start_DMA+0x1d4>)
 8001e40:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001e5a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	334c      	adds	r3, #76	@ 0x4c
 8001e76:	4619      	mov	r1, r3
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f000 fcda 	bl	8002834 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d12a      	bne.n	8001ee2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a26      	ldr	r2, [pc, #152]	@ (8001f2c <HAL_ADC_Start_DMA+0x1d8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d015      	beq.n	8001ec2 <HAL_ADC_Start_DMA+0x16e>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a25      	ldr	r2, [pc, #148]	@ (8001f30 <HAL_ADC_Start_DMA+0x1dc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d105      	bne.n	8001eac <HAL_ADC_Start_DMA+0x158>
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <HAL_ADC_Start_DMA+0x1c8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 031f 	and.w	r3, r3, #31
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a20      	ldr	r2, [pc, #128]	@ (8001f34 <HAL_ADC_Start_DMA+0x1e0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d129      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x1b6>
 8001eb6:	4b19      	ldr	r3, [pc, #100]	@ (8001f1c <HAL_ADC_Start_DMA+0x1c8>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0310 	and.w	r3, r3, #16
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d123      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11c      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	e013      	b.n	8001f0a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a11      	ldr	r2, [pc, #68]	@ (8001f2c <HAL_ADC_Start_DMA+0x1d8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d10e      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x1b6>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d107      	bne.n	8001f0a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f08:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	20000000 	.word	0x20000000
 8001f18:	431bde83 	.word	0x431bde83
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	080023b1 	.word	0x080023b1
 8001f24:	0800246b 	.word	0x0800246b
 8001f28:	08002487 	.word	0x08002487
 8001f2c:	40012000 	.word	0x40012000
 8001f30:	40012100 	.word	0x40012100
 8001f34:	40012200 	.word	0x40012200

08001f38 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1c>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e105      	b.n	800219c <HAL_ADC_ConfigChannel+0x228>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b09      	cmp	r3, #9
 8001f9e:	d925      	bls.n	8001fec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68d9      	ldr	r1, [r3, #12]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	3b1e      	subs	r3, #30
 8001fb6:	2207      	movs	r2, #7
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d9      	ldr	r1, [r3, #12]
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	4603      	mov	r3, r0
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4403      	add	r3, r0
 8001fde:	3b1e      	subs	r3, #30
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	e022      	b.n	8002032 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	2207      	movs	r2, #7
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43da      	mvns	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	400a      	ands	r2, r1
 800200e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6919      	ldr	r1, [r3, #16]
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	b29b      	uxth	r3, r3
 8002020:	4618      	mov	r0, r3
 8002022:	4603      	mov	r3, r0
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	4403      	add	r3, r0
 8002028:	409a      	lsls	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b06      	cmp	r3, #6
 8002038:	d824      	bhi.n	8002084 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	3b05      	subs	r3, #5
 800204c:	221f      	movs	r2, #31
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	400a      	ands	r2, r1
 800205a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	b29b      	uxth	r3, r3
 8002068:	4618      	mov	r0, r3
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b05      	subs	r3, #5
 8002076:	fa00 f203 	lsl.w	r2, r0, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	635a      	str	r2, [r3, #52]	@ 0x34
 8002082:	e04c      	b.n	800211e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d824      	bhi.n	80020d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	3b23      	subs	r3, #35	@ 0x23
 800209e:	221f      	movs	r2, #31
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43da      	mvns	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	400a      	ands	r2, r1
 80020ac:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	3b23      	subs	r3, #35	@ 0x23
 80020c8:	fa00 f203 	lsl.w	r2, r0, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80020d4:	e023      	b.n	800211e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	3b41      	subs	r3, #65	@ 0x41
 80020e8:	221f      	movs	r2, #31
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	400a      	ands	r2, r1
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b41      	subs	r3, #65	@ 0x41
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800211e:	4b22      	ldr	r3, [pc, #136]	@ (80021a8 <HAL_ADC_ConfigChannel+0x234>)
 8002120:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a21      	ldr	r2, [pc, #132]	@ (80021ac <HAL_ADC_ConfigChannel+0x238>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d109      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1cc>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b12      	cmp	r3, #18
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a19      	ldr	r2, [pc, #100]	@ (80021ac <HAL_ADC_ConfigChannel+0x238>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d123      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x21e>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b10      	cmp	r3, #16
 8002150:	d003      	beq.n	800215a <HAL_ADC_ConfigChannel+0x1e6>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b11      	cmp	r3, #17
 8002158:	d11b      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d111      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216e:	4b10      	ldr	r3, [pc, #64]	@ (80021b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a10      	ldr	r2, [pc, #64]	@ (80021b4 <HAL_ADC_ConfigChannel+0x240>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9a      	lsrs	r2, r3, #18
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002184:	e002      	b.n	800218c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40012300 	.word	0x40012300
 80021ac:	40012000 	.word	0x40012000
 80021b0:	20000000 	.word	0x20000000
 80021b4:	431bde83 	.word	0x431bde83

080021b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c0:	4b79      	ldr	r3, [pc, #484]	@ (80023a8 <ADC_Init+0x1f0>)
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	431a      	orrs	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685a      	ldr	r2, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	021a      	lsls	r2, r3, #8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	430a      	orrs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6899      	ldr	r1, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	4a58      	ldr	r2, [pc, #352]	@ (80023ac <ADC_Init+0x1f4>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d022      	beq.n	8002296 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800225e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e00f      	b.n	80022b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80022b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0202 	bic.w	r2, r2, #2
 80022c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7e1b      	ldrb	r3, [r3, #24]
 80022d0:	005a      	lsls	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002302:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6859      	ldr	r1, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	3b01      	subs	r3, #1
 8002310:	035a      	lsls	r2, r3, #13
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	e007      	b.n	800232c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800232a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800233a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	3b01      	subs	r3, #1
 8002348:	051a      	lsls	r2, r3, #20
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6899      	ldr	r1, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800236e:	025a      	lsls	r2, r3, #9
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6899      	ldr	r1, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	029a      	lsls	r2, r3, #10
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	609a      	str	r2, [r3, #8]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40012300 	.word	0x40012300
 80023ac:	0f000001 	.word	0x0f000001

080023b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d13c      	bne.n	8002444 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d12b      	bne.n	800243c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d127      	bne.n	800243c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002404:	2b00      	cmp	r3, #0
 8002406:	d119      	bne.n	800243c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0220 	bic.w	r2, r2, #32
 8002416:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d105      	bne.n	800243c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f7ff fd7b 	bl	8001f38 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002442:	e00e      	b.n	8002462 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f7ff fd85 	bl	8001f60 <HAL_ADC_ErrorCallback>
}
 8002456:	e004      	b.n	8002462 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fd67 	bl	8001f4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002492:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2240      	movs	r2, #64	@ 0x40
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f043 0204 	orr.w	r2, r3, #4
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff fd5a 	bl	8001f60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4b0c      	ldr	r3, [pc, #48]	@ (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e6:	4a04      	ldr	r2, [pc, #16]	@ (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <__NVIC_GetPriorityGrouping+0x18>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 0307 	and.w	r3, r3, #7
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	db0b      	blt.n	8002542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4907      	ldr	r1, [pc, #28]	@ (8002550 <__NVIC_EnableIRQ+0x38>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2001      	movs	r0, #1
 800253a:	fa00 f202 	lsl.w	r2, r0, r2
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	@ (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	@ (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	@ 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	@ 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002620:	d301      	bcc.n	8002626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002622:	2301      	movs	r3, #1
 8002624:	e00f      	b.n	8002646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002626:	4a0a      	ldr	r2, [pc, #40]	@ (8002650 <SysTick_Config+0x40>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800262e:	210f      	movs	r1, #15
 8002630:	f04f 30ff 	mov.w	r0, #4294967295
 8002634:	f7ff ff8e 	bl	8002554 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <SysTick_Config+0x40>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800263e:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <SysTick_Config+0x40>)
 8002640:	2207      	movs	r2, #7
 8002642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	e000e010 	.word	0xe000e010

08002654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff29 	bl	80024b4 <__NVIC_SetPriorityGrouping>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800266a:	b580      	push	{r7, lr}
 800266c:	b086      	sub	sp, #24
 800266e:	af00      	add	r7, sp, #0
 8002670:	4603      	mov	r3, r0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800267c:	f7ff ff3e 	bl	80024fc <__NVIC_GetPriorityGrouping>
 8002680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f7ff ff8e 	bl	80025a8 <NVIC_EncodePriority>
 800268c:	4602      	mov	r2, r0
 800268e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff ff5d 	bl	8002554 <__NVIC_SetPriority>
}
 800269a:	bf00      	nop
 800269c:	3718      	adds	r7, #24
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	4603      	mov	r3, r0
 80026aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff31 	bl	8002518 <__NVIC_EnableIRQ>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff ffa2 	bl	8002610 <SysTick_Config>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff fac2 	bl	8001c6c <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e099      	b.n	8002828 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2202      	movs	r2, #2
 8002700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002714:	e00f      	b.n	8002736 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002716:	f7ff faa9 	bl	8001c6c <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b05      	cmp	r3, #5
 8002722:	d908      	bls.n	8002736 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2220      	movs	r2, #32
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2203      	movs	r2, #3
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e078      	b.n	8002828 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e8      	bne.n	8002716 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <HAL_DMA_Init+0x158>)
 8002750:	4013      	ands	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002762:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	4313      	orrs	r3, r2
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f023 0307 	bic.w	r3, r3, #7
 80027b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d117      	bne.n	80027fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00e      	beq.n	80027fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fa6f 	bl	8002cc0 <DMA_CheckFifoParam>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2240      	movs	r2, #64	@ 0x40
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80027f6:	2301      	movs	r3, #1
 80027f8:	e016      	b.n	8002828 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 fa26 	bl	8002c54 <DMA_CalcBaseAndBitshift>
 8002808:	4603      	mov	r3, r0
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	223f      	movs	r2, #63	@ 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	f010803f 	.word	0xf010803f

08002834 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
 8002840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <HAL_DMA_Start_IT+0x26>
 8002856:	2302      	movs	r3, #2
 8002858:	e040      	b.n	80028dc <HAL_DMA_Start_IT+0xa8>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d12f      	bne.n	80028ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f9b8 	bl	8002bf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	223f      	movs	r2, #63	@ 0x3f
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0216 	orr.w	r2, r2, #22
 80028a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0208 	orr.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	e005      	b.n	80028da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f0:	4b8e      	ldr	r3, [pc, #568]	@ (8002b2c <HAL_DMA_IRQHandler+0x248>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a8e      	ldr	r2, [pc, #568]	@ (8002b30 <HAL_DMA_IRQHandler+0x24c>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	0a9b      	lsrs	r3, r3, #10
 80028fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290e:	2208      	movs	r2, #8
 8002910:	409a      	lsls	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d01a      	beq.n	8002950 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d013      	beq.n	8002950 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0204 	bic.w	r2, r2, #4
 8002936:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	2208      	movs	r2, #8
 800293e:	409a      	lsls	r2, r3
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002954:	2201      	movs	r2, #1
 8002956:	409a      	lsls	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d012      	beq.n	8002986 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00b      	beq.n	8002986 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002972:	2201      	movs	r2, #1
 8002974:	409a      	lsls	r2, r3
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f043 0202 	orr.w	r2, r3, #2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298a:	2204      	movs	r2, #4
 800298c:	409a      	lsls	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4013      	ands	r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	2204      	movs	r2, #4
 80029aa:	409a      	lsls	r2, r3
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b4:	f043 0204 	orr.w	r2, r3, #4
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	2210      	movs	r2, #16
 80029c2:	409a      	lsls	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d043      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d03c      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029de:	2210      	movs	r2, #16
 80029e0:	409a      	lsls	r2, r3
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d018      	beq.n	8002a26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d108      	bne.n	8002a14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d024      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
 8002a12:	e01f      	b.n	8002a54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01b      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	4798      	blx	r3
 8002a24:	e016      	b.n	8002a54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0208 	bic.w	r2, r2, #8
 8002a42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	2220      	movs	r2, #32
 8002a5a:	409a      	lsls	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 808f 	beq.w	8002b84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8087 	beq.w	8002b84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d136      	bne.n	8002afc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0216 	bic.w	r2, r2, #22
 8002a9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <HAL_DMA_IRQHandler+0x1da>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0208 	bic.w	r2, r2, #8
 8002acc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	223f      	movs	r2, #63	@ 0x3f
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        if(hdma->XferAbortCallback != NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d07e      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	4798      	blx	r3
        }
        return;
 8002afa:	e079      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d01d      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10d      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d031      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	4798      	blx	r3
 8002b28:	e02c      	b.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
 8002b2a:	bf00      	nop
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d023      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	4798      	blx	r3
 8002b44:	e01e      	b.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10f      	bne.n	8002b74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0210 	bic.w	r2, r2, #16
 8002b62:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d032      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2205      	movs	r2, #5
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d307      	bcc.n	8002bcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f2      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x2cc>
 8002bca:	e000      	b.n	8002bce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bcc:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	4798      	blx	r3
 8002bee:	e000      	b.n	8002bf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002bf0:	bf00      	nop
    }
  }
}
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b40      	cmp	r3, #64	@ 0x40
 8002c24:	d108      	bne.n	8002c38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c36:	e007      	b.n	8002c48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	60da      	str	r2, [r3, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	3b10      	subs	r3, #16
 8002c64:	4a14      	ldr	r2, [pc, #80]	@ (8002cb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <DMA_CalcBaseAndBitshift+0x68>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d909      	bls.n	8002c96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c8a:	f023 0303 	bic.w	r3, r3, #3
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c94:	e007      	b.n	8002ca6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	aaaaaaab 	.word	0xaaaaaaab
 8002cbc:	08005514 	.word	0x08005514

08002cc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d11f      	bne.n	8002d1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d856      	bhi.n	8002d8e <DMA_CheckFifoParam+0xce>
 8002ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <DMA_CheckFifoParam+0x28>)
 8002ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce6:	bf00      	nop
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d0b 	.word	0x08002d0b
 8002cf0:	08002cf9 	.word	0x08002cf9
 8002cf4:	08002d8f 	.word	0x08002d8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d046      	beq.n	8002d92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d08:	e043      	b.n	8002d92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d12:	d140      	bne.n	8002d96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d18:	e03d      	b.n	8002d96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d22:	d121      	bne.n	8002d68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d837      	bhi.n	8002d9a <DMA_CheckFifoParam+0xda>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <DMA_CheckFifoParam+0x70>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002d47 	.word	0x08002d47
 8002d38:	08002d41 	.word	0x08002d41
 8002d3c:	08002d59 	.word	0x08002d59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e030      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d025      	beq.n	8002d9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d56:	e022      	b.n	8002d9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d60:	d11f      	bne.n	8002da2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d66:	e01c      	b.n	8002da2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d903      	bls.n	8002d76 <DMA_CheckFifoParam+0xb6>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d003      	beq.n	8002d7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d74:	e018      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7a:	e015      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8c:	e00b      	b.n	8002da6 <DMA_CheckFifoParam+0xe6>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e00a      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e008      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e006      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e004      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e002      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002da2:	bf00      	nop
 8002da4:	e000      	b.n	8002da8 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
    }
  } 
  
  return status; 
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3714      	adds	r7, #20
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	@ 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e16b      	b.n	80030ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f040 815a 	bne.w	80030a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d00b      	beq.n	8002e12 <HAL_GPIO_Init+0x5a>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e06:	2b11      	cmp	r3, #17
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b12      	cmp	r3, #18
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0xfc>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b12      	cmp	r3, #18
 8002eb2:	d123      	bne.n	8002efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	08da      	lsrs	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3208      	adds	r2, #8
 8002ef6:	69b9      	ldr	r1, [r7, #24]
 8002ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80b4 	beq.w	80030a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b60      	ldr	r3, [pc, #384]	@ (80030c4 <HAL_GPIO_Init+0x30c>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	4a5f      	ldr	r2, [pc, #380]	@ (80030c4 <HAL_GPIO_Init+0x30c>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80030c4 <HAL_GPIO_Init+0x30c>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5a:	4a5b      	ldr	r2, [pc, #364]	@ (80030c8 <HAL_GPIO_Init+0x310>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_GPIO_Init+0x314>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02b      	beq.n	8002fde <HAL_GPIO_Init+0x226>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a51      	ldr	r2, [pc, #324]	@ (80030d0 <HAL_GPIO_Init+0x318>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d025      	beq.n	8002fda <HAL_GPIO_Init+0x222>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a50      	ldr	r2, [pc, #320]	@ (80030d4 <HAL_GPIO_Init+0x31c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d01f      	beq.n	8002fd6 <HAL_GPIO_Init+0x21e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4f      	ldr	r2, [pc, #316]	@ (80030d8 <HAL_GPIO_Init+0x320>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d019      	beq.n	8002fd2 <HAL_GPIO_Init+0x21a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4e      	ldr	r2, [pc, #312]	@ (80030dc <HAL_GPIO_Init+0x324>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_GPIO_Init+0x216>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a4d      	ldr	r2, [pc, #308]	@ (80030e0 <HAL_GPIO_Init+0x328>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d00d      	beq.n	8002fca <HAL_GPIO_Init+0x212>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a4c      	ldr	r2, [pc, #304]	@ (80030e4 <HAL_GPIO_Init+0x32c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a4b      	ldr	r2, [pc, #300]	@ (80030e8 <HAL_GPIO_Init+0x330>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_GPIO_Init+0x20a>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e00e      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	e00c      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fc6:	2306      	movs	r3, #6
 8002fc8:	e00a      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fca:	2305      	movs	r3, #5
 8002fcc:	e008      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fce:	2304      	movs	r3, #4
 8002fd0:	e006      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e004      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e002      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_GPIO_Init+0x228>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f002 0203 	and.w	r2, r2, #3
 8002fe6:	0092      	lsls	r2, r2, #2
 8002fe8:	4093      	lsls	r3, r2
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ff0:	4935      	ldr	r1, [pc, #212]	@ (80030c8 <HAL_GPIO_Init+0x310>)
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	3302      	adds	r3, #2
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003022:	4a32      	ldr	r2, [pc, #200]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003028:	4b30      	ldr	r3, [pc, #192]	@ (80030ec <HAL_GPIO_Init+0x334>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800304c:	4a27      	ldr	r2, [pc, #156]	@ (80030ec <HAL_GPIO_Init+0x334>)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003052:	4b26      	ldr	r3, [pc, #152]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003076:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <HAL_GPIO_Init+0x334>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_GPIO_Init+0x334>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030a0:	4a12      	ldr	r2, [pc, #72]	@ (80030ec <HAL_GPIO_Init+0x334>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3301      	adds	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b0f      	cmp	r3, #15
 80030b0:	f67f ae90 	bls.w	8002dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3724      	adds	r7, #36	@ 0x24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40013800 	.word	0x40013800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40020800 	.word	0x40020800
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40021400 	.word	0x40021400
 80030e4:	40021800 	.word	0x40021800
 80030e8:	40021c00 	.word	0x40021c00
 80030ec:	40013c00 	.word	0x40013c00

080030f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	887b      	ldrh	r3, [r7, #2]
 8003102:	4013      	ands	r3, r2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e001      	b.n	8003112 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
 800312c:	4613      	mov	r3, r2
 800312e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003130:	787b      	ldrb	r3, [r7, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800313c:	e003      	b.n	8003146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800313e:	887b      	ldrh	r3, [r7, #2]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	619a      	str	r2, [r3, #24]
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e25e      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d075      	beq.n	800325e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003172:	4b88      	ldr	r3, [pc, #544]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d00c      	beq.n	8003198 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800317e:	4b85      	ldr	r3, [pc, #532]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003186:	2b08      	cmp	r3, #8
 8003188:	d112      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4b82      	ldr	r3, [pc, #520]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003196:	d10b      	bne.n	80031b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	4b7e      	ldr	r3, [pc, #504]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05b      	beq.n	800325c <HAL_RCC_OscConfig+0x108>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d157      	bne.n	800325c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e239      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031b8:	d106      	bne.n	80031c8 <HAL_RCC_OscConfig+0x74>
 80031ba:	4b76      	ldr	r3, [pc, #472]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a75      	ldr	r2, [pc, #468]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e01d      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031d0:	d10c      	bne.n	80031ec <HAL_RCC_OscConfig+0x98>
 80031d2:	4b70      	ldr	r3, [pc, #448]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a6f      	ldr	r2, [pc, #444]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	4b6d      	ldr	r3, [pc, #436]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a6c      	ldr	r2, [pc, #432]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	e00b      	b.n	8003204 <HAL_RCC_OscConfig+0xb0>
 80031ec:	4b69      	ldr	r3, [pc, #420]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a68      	ldr	r2, [pc, #416]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b66      	ldr	r3, [pc, #408]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a65      	ldr	r2, [pc, #404]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80031fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fd2e 	bl	8001c6c <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fd2a 	bl	8001c6c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	@ 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1fe      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003226:	4b5b      	ldr	r3, [pc, #364]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0xc0>
 8003232:	e014      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe fd1a 	bl	8001c6c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800323c:	f7fe fd16 	bl	8001c6c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b64      	cmp	r3, #100	@ 0x64
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e1ea      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800324e:	4b51      	ldr	r3, [pc, #324]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0xe8>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d063      	beq.n	8003332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326a:	4b4a      	ldr	r3, [pc, #296]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003276:	4b47      	ldr	r3, [pc, #284]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800327e:	2b08      	cmp	r3, #8
 8003280:	d11c      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b44      	ldr	r3, [pc, #272]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d116      	bne.n	80032bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800328e:	4b41      	ldr	r3, [pc, #260]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1be      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4937      	ldr	r1, [pc, #220]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	e03a      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d020      	beq.n	8003306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c4:	4b34      	ldr	r3, [pc, #208]	@ (8003398 <HAL_RCC_OscConfig+0x244>)
 80032c6:	2201      	movs	r2, #1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fccf 	bl	8001c6c <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d2:	f7fe fccb 	bl	8001c6c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e19f      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f0:	4b28      	ldr	r3, [pc, #160]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	4925      	ldr	r1, [pc, #148]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
 8003304:	e015      	b.n	8003332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003306:	4b24      	ldr	r3, [pc, #144]	@ (8003398 <HAL_RCC_OscConfig+0x244>)
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe fcae 	bl	8001c6c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003314:	f7fe fcaa 	bl	8001c6c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e17e      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003326:	4b1b      	ldr	r3, [pc, #108]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d036      	beq.n	80033ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d016      	beq.n	8003374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_RCC_OscConfig+0x248>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fc8e 	bl	8001c6c <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe fc8a 	bl	8001c6c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e15e      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <HAL_RCC_OscConfig+0x240>)
 8003368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d0f0      	beq.n	8003354 <HAL_RCC_OscConfig+0x200>
 8003372:	e01b      	b.n	80033ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003374:	4b09      	ldr	r3, [pc, #36]	@ (800339c <HAL_RCC_OscConfig+0x248>)
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337a:	f7fe fc77 	bl	8001c6c <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	e00e      	b.n	80033a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003382:	f7fe fc73 	bl	8001c6c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d907      	bls.n	80033a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e147      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
 8003394:	40023800 	.word	0x40023800
 8003398:	42470000 	.word	0x42470000
 800339c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	4b88      	ldr	r3, [pc, #544]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1ea      	bne.n	8003382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8097 	beq.w	80034e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033be:	4b81      	ldr	r3, [pc, #516]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	4b7d      	ldr	r3, [pc, #500]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	4a7c      	ldr	r2, [pc, #496]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033da:	4b7a      	ldr	r3, [pc, #488]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b77      	ldr	r3, [pc, #476]	@ (80035c8 <HAL_RCC_OscConfig+0x474>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d118      	bne.n	8003428 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f6:	4b74      	ldr	r3, [pc, #464]	@ (80035c8 <HAL_RCC_OscConfig+0x474>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a73      	ldr	r2, [pc, #460]	@ (80035c8 <HAL_RCC_OscConfig+0x474>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fc33 	bl	8001c6c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800340a:	f7fe fc2f 	bl	8001c6c <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e103      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341c:	4b6a      	ldr	r3, [pc, #424]	@ (80035c8 <HAL_RCC_OscConfig+0x474>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0f0      	beq.n	800340a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d106      	bne.n	800343e <HAL_RCC_OscConfig+0x2ea>
 8003430:	4b64      	ldr	r3, [pc, #400]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003434:	4a63      	ldr	r2, [pc, #396]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	6713      	str	r3, [r2, #112]	@ 0x70
 800343c:	e01c      	b.n	8003478 <HAL_RCC_OscConfig+0x324>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b05      	cmp	r3, #5
 8003444:	d10c      	bne.n	8003460 <HAL_RCC_OscConfig+0x30c>
 8003446:	4b5f      	ldr	r3, [pc, #380]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800344a:	4a5e      	ldr	r2, [pc, #376]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 800344c:	f043 0304 	orr.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	@ 0x70
 8003452:	4b5c      	ldr	r3, [pc, #368]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003456:	4a5b      	ldr	r2, [pc, #364]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	6713      	str	r3, [r2, #112]	@ 0x70
 800345e:	e00b      	b.n	8003478 <HAL_RCC_OscConfig+0x324>
 8003460:	4b58      	ldr	r3, [pc, #352]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003464:	4a57      	ldr	r2, [pc, #348]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 0301 	bic.w	r3, r3, #1
 800346a:	6713      	str	r3, [r2, #112]	@ 0x70
 800346c:	4b55      	ldr	r3, [pc, #340]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 800346e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003470:	4a54      	ldr	r2, [pc, #336]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003472:	f023 0304 	bic.w	r3, r3, #4
 8003476:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d015      	beq.n	80034ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003480:	f7fe fbf4 	bl	8001c6c <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003486:	e00a      	b.n	800349e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003488:	f7fe fbf0 	bl	8001c6c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003496:	4293      	cmp	r3, r2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e0c2      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800349e:	4b49      	ldr	r3, [pc, #292]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ee      	beq.n	8003488 <HAL_RCC_OscConfig+0x334>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ac:	f7fe fbde 	bl	8001c6c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b2:	e00a      	b.n	80034ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034b4:	f7fe fbda 	bl	8001c6c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0ac      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ca:	4b3e      	ldr	r3, [pc, #248]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1ee      	bne.n	80034b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034d6:	7dfb      	ldrb	r3, [r7, #23]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d105      	bne.n	80034e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034dc:	4b39      	ldr	r3, [pc, #228]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	4a38      	ldr	r2, [pc, #224]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8098 	beq.w	8003622 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034f2:	4b34      	ldr	r3, [pc, #208]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d05c      	beq.n	80035b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d141      	bne.n	800358a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003506:	4b31      	ldr	r3, [pc, #196]	@ (80035cc <HAL_RCC_OscConfig+0x478>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe fbae 	bl	8001c6c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003514:	f7fe fbaa 	bl	8001c6c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e07e      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003526:	4b27      	ldr	r3, [pc, #156]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69da      	ldr	r2, [r3, #28]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003540:	019b      	lsls	r3, r3, #6
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	3b01      	subs	r3, #1
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003554:	061b      	lsls	r3, r3, #24
 8003556:	491b      	ldr	r1, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 8003558:	4313      	orrs	r3, r2
 800355a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800355c:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x478>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003562:	f7fe fb83 	bl	8001c6c <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800356a:	f7fe fb7f 	bl	8001c6c <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e053      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357c:	4b11      	ldr	r3, [pc, #68]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x416>
 8003588:	e04b      	b.n	8003622 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800358a:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <HAL_RCC_OscConfig+0x478>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe fb6c 	bl	8001c6c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe fb68 	bl	8001c6c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e03c      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035aa:	4b06      	ldr	r3, [pc, #24]	@ (80035c4 <HAL_RCC_OscConfig+0x470>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f0      	bne.n	8003598 <HAL_RCC_OscConfig+0x444>
 80035b6:	e034      	b.n	8003622 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e02f      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40007000 	.word	0x40007000
 80035cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d0:	4b16      	ldr	r3, [pc, #88]	@ (800362c <HAL_RCC_OscConfig+0x4d8>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d11c      	bne.n	800361e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d115      	bne.n	800361e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10d      	bne.n	800361e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d106      	bne.n	800361e <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0cc      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b68      	ldr	r3, [pc, #416]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d90c      	bls.n	800366c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b65      	ldr	r3, [pc, #404]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b63      	ldr	r3, [pc, #396]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0b8      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b59      	ldr	r3, [pc, #356]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a58      	ldr	r2, [pc, #352]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b53      	ldr	r3, [pc, #332]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a52      	ldr	r2, [pc, #328]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b50      	ldr	r3, [pc, #320]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	494d      	ldr	r1, [pc, #308]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d044      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d119      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b3f      	ldr	r3, [pc, #252]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3b      	ldr	r3, [pc, #236]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e067      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b37      	ldr	r3, [pc, #220]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4934      	ldr	r1, [pc, #208]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fe faa4 	bl	8001c6c <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fe faa0 	bl	8001c6c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2b      	ldr	r3, [pc, #172]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b25      	ldr	r3, [pc, #148]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d20c      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b22      	ldr	r3, [pc, #136]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b20      	ldr	r3, [pc, #128]	@ (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e032      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4916      	ldr	r1, [pc, #88]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a2:	4b12      	ldr	r3, [pc, #72]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490e      	ldr	r1, [pc, #56]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b6:	f000 f821 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	@ (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490a      	ldr	r1, [pc, #40]	@ (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d2:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fe fa04 	bl	8001be4 <HAL_InitTick>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	080054fc 	.word	0x080054fc
 80037f4:	20000000 	.word	0x20000000
 80037f8:	20000004 	.word	0x20000004

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b094      	sub	sp, #80	@ 0x50
 8003802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	647b      	str	r3, [r7, #68]	@ 0x44
 8003808:	2300      	movs	r3, #0
 800380a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800380c:	2300      	movs	r3, #0
 800380e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003814:	4b79      	ldr	r3, [pc, #484]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d00d      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x40>
 8003820:	2b08      	cmp	r3, #8
 8003822:	f200 80e1 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x34>
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x3a>
 800382e:	e0db      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b73      	ldr	r3, [pc, #460]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003832:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003834:	e0db      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003836:	4b73      	ldr	r3, [pc, #460]	@ (8003a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003838:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800383a:	e0d8      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b6f      	ldr	r3, [pc, #444]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003844:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003846:	4b6d      	ldr	r3, [pc, #436]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b6a      	ldr	r3, [pc, #424]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800385c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	633b      	str	r3, [r7, #48]	@ 0x30
 8003866:	2300      	movs	r3, #0
 8003868:	637b      	str	r3, [r7, #52]	@ 0x34
 800386a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4621      	mov	r1, r4
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	6139      	str	r1, [r7, #16]
 800388c:	4629      	mov	r1, r5
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a0:	4659      	mov	r1, fp
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	4651      	mov	r1, sl
 80038a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038aa:	4651      	mov	r1, sl
 80038ac:	018a      	lsls	r2, r1, #6
 80038ae:	4651      	mov	r1, sl
 80038b0:	ebb2 0801 	subs.w	r8, r2, r1
 80038b4:	4659      	mov	r1, fp
 80038b6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ce:	4690      	mov	r8, r2
 80038d0:	4699      	mov	r9, r3
 80038d2:	4623      	mov	r3, r4
 80038d4:	eb18 0303 	adds.w	r3, r8, r3
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	462b      	mov	r3, r5
 80038dc:	eb49 0303 	adc.w	r3, r9, r3
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ee:	4629      	mov	r1, r5
 80038f0:	024b      	lsls	r3, r1, #9
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f8:	4621      	mov	r1, r4
 80038fa:	024a      	lsls	r2, r1, #9
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003902:	2200      	movs	r2, #0
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003906:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800390c:	f7fd f89e 	bl	8000a4c <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003918:	e058      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	4618      	mov	r0, r3
 8003924:	4611      	mov	r1, r2
 8003926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4641      	mov	r1, r8
 800394e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb63 0b01 	sbc.w	fp, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800396c:	ebb2 040a 	subs.w	r4, r2, sl
 8003970:	eb63 050b 	sbc.w	r5, r3, fp
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	464b      	mov	r3, r9
 8003990:	eb45 0303 	adc.w	r3, r5, r3
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a2:	4629      	mov	r1, r5
 80039a4:	028b      	lsls	r3, r1, #10
 80039a6:	4621      	mov	r1, r4
 80039a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ac:	4621      	mov	r1, r4
 80039ae:	028a      	lsls	r2, r1, #10
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b6:	2200      	movs	r2, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	61fa      	str	r2, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	f7fd f844 	bl	8000a4c <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	@ (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80039dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3750      	adds	r7, #80	@ 0x50
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	@ (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	@ (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	0800550c 	.word	0x0800550c

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	@ (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	0800550c 	.word	0x0800550c

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e03f      	b.n	8003b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fe f810 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	@ 0x24
 8003aa0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f90b 	bl	8003cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b088      	sub	sp, #32
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	f040 8083 	bne.w	8003c32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <HAL_UART_Transmit+0x2e>
 8003b32:	88fb      	ldrh	r3, [r7, #6]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e07b      	b.n	8003c34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Transmit+0x40>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e074      	b.n	8003c34 <HAL_UART_Transmit+0x12a>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2221      	movs	r2, #33	@ 0x21
 8003b5c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b60:	f7fe f884 	bl	8001c6c <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	88fa      	ldrh	r2, [r7, #6]
 8003b6a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    while (huart->TxXferCount > 0U)
 8003b7a:	e042      	b.n	8003c02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b92:	d122      	bne.n	8003bda <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2180      	movs	r1, #128	@ 0x80
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f84c 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e042      	b.n	8003c34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bc0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d103      	bne.n	8003bd2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	3302      	adds	r3, #2
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e017      	b.n	8003c02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	e013      	b.n	8003c02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	2200      	movs	r2, #0
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f829 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e01f      	b.n	8003c34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	60ba      	str	r2, [r7, #8]
 8003bfa:	781a      	ldrb	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1b7      	bne.n	8003b7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2200      	movs	r2, #0
 8003c14:	2140      	movs	r1, #64	@ 0x40
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f810 	bl	8003c3c <UART_WaitOnFlagUntilTimeout>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e006      	b.n	8003c34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	e000      	b.n	8003c34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c32:	2302      	movs	r3, #2
  }
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4c:	e02c      	b.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c54:	d028      	beq.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c5c:	f7fe f806 	bl	8001c6c <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d21d      	bcs.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8003c7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e00f      	b.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	bf0c      	ite	eq
 8003cb8:	2301      	moveq	r3, #1
 8003cba:	2300      	movne	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	79fb      	ldrb	r3, [r7, #7]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d0c3      	beq.n	8003c4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cde:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003cea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cee:	68d9      	ldr	r1, [r3, #12]
 8003cf0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	ea40 0301 	orr.w	r3, r0, r1
 8003cfa:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cfc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	431a      	orrs	r2, r3
 8003d0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
  MODIFY_REG(huart->Instance->CR1,
 8003d1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d2a:	f021 010c 	bic.w	r1, r1, #12
 8003d2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	f8d7 3204 	ldr.w	r3, [r7, #516]	@ 0x204
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	ea40 0301 	orr.w	r3, r0, r1
 8003d58:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d64:	f040 824a 	bne.w	80041fc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4b96      	ldr	r3, [pc, #600]	@ (8003fc8 <UART_SetConfig+0x2f8>)
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d006      	beq.n	8003d82 <UART_SetConfig+0xb2>
 8003d74:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b94      	ldr	r3, [pc, #592]	@ (8003fcc <UART_SetConfig+0x2fc>)
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	f040 8129 	bne.w	8003fd4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d82:	f7ff fe61 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8003d86:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8003d94:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8003d98:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	@ 0x1f0
 8003d9c:	4622      	mov	r2, r4
 8003d9e:	462b      	mov	r3, r5
 8003da0:	1891      	adds	r1, r2, r2
 8003da2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8003da6:	415b      	adcs	r3, r3
 8003da8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003dac:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8003db0:	4621      	mov	r1, r4
 8003db2:	1851      	adds	r1, r2, r1
 8003db4:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8003db8:	4629      	mov	r1, r5
 8003dba:	414b      	adcs	r3, r1
 8003dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	@ 0xc8
 8003dcc:	4649      	mov	r1, r9
 8003dce:	00cb      	lsls	r3, r1, #3
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dd6:	4641      	mov	r1, r8
 8003dd8:	00ca      	lsls	r2, r1, #3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	4622      	mov	r2, r4
 8003de2:	189b      	adds	r3, r3, r2
 8003de4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003de8:	462b      	mov	r3, r5
 8003dea:	460a      	mov	r2, r1
 8003dec:	eb42 0303 	adc.w	r3, r2, r3
 8003df0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8003df4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003e00:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8003e04:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	18db      	adds	r3, r3, r3
 8003e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e10:	4613      	mov	r3, r2
 8003e12:	eb42 0303 	adc.w	r3, r2, r3
 8003e16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e1a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003e1e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8003e22:	f7fc fe13 	bl	8000a4c <__aeabi_uldivmod>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4b69      	ldr	r3, [pc, #420]	@ (8003fd0 <UART_SetConfig+0x300>)
 8003e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003e30:	095b      	lsrs	r3, r3, #5
 8003e32:	011c      	lsls	r4, r3, #4
 8003e34:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8003e3e:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003e42:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	@ 0x1d8
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	f8c7 10b8 	str.w	r1, [r7, #184]	@ 0xb8
 8003e50:	415b      	adcs	r3, r3
 8003e52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e56:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8003e5a:	4641      	mov	r1, r8
 8003e5c:	1851      	adds	r1, r2, r1
 8003e5e:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8003e62:	4649      	mov	r1, r9
 8003e64:	414b      	adcs	r3, r1
 8003e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	@ 0xb0
 8003e76:	4659      	mov	r1, fp
 8003e78:	00cb      	lsls	r3, r1, #3
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e80:	4651      	mov	r1, sl
 8003e82:	00ca      	lsls	r2, r1, #3
 8003e84:	4610      	mov	r0, r2
 8003e86:	4619      	mov	r1, r3
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4642      	mov	r2, r8
 8003e8c:	189b      	adds	r3, r3, r2
 8003e8e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003e92:	464b      	mov	r3, r9
 8003e94:	460a      	mov	r2, r1
 8003e96:	eb42 0303 	adc.w	r3, r2, r3
 8003e9a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003e9e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003eaa:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8003eae:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	18db      	adds	r3, r3, r3
 8003eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003eba:	4613      	mov	r3, r2
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ec4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003ec8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	@ 0x1d0
 8003ecc:	f7fc fdbe 	bl	8000a4c <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd0 <UART_SetConfig+0x300>)
 8003ed8:	fba3 2301 	umull	r2, r3, r3, r1
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	2264      	movs	r2, #100	@ 0x64
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	1acb      	subs	r3, r1, r3
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003eec:	4b38      	ldr	r3, [pc, #224]	@ (8003fd0 <UART_SetConfig+0x300>)
 8003eee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003efa:	441c      	add	r4, r3
 8003efc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f00:	2200      	movs	r2, #0
 8003f02:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003f06:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8003f0a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	@ 0x1c0
 8003f0e:	4642      	mov	r2, r8
 8003f10:	464b      	mov	r3, r9
 8003f12:	1891      	adds	r1, r2, r2
 8003f14:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8003f18:	415b      	adcs	r3, r3
 8003f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f1e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003f22:	4641      	mov	r1, r8
 8003f24:	1851      	adds	r1, r2, r1
 8003f26:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	414b      	adcs	r3, r1
 8003f2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	@ 0x98
 8003f3e:	4659      	mov	r1, fp
 8003f40:	00cb      	lsls	r3, r1, #3
 8003f42:	4651      	mov	r1, sl
 8003f44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f48:	4651      	mov	r1, sl
 8003f4a:	00ca      	lsls	r2, r1, #3
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4603      	mov	r3, r0
 8003f52:	4642      	mov	r2, r8
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	460a      	mov	r2, r1
 8003f5e:	eb42 0303 	adc.w	r3, r2, r3
 8003f62:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003f66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003f72:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8003f76:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	18db      	adds	r3, r3, r3
 8003f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f82:	4613      	mov	r3, r2
 8003f84:	eb42 0303 	adc.w	r3, r2, r3
 8003f88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f8c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003f90:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	@ 0x1b8
 8003f94:	f7fc fd5a 	bl	8000a4c <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <UART_SetConfig+0x300>)
 8003f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	2164      	movs	r1, #100	@ 0x64
 8003fa6:	fb01 f303 	mul.w	r3, r1, r3
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	3332      	adds	r3, #50	@ 0x32
 8003fb0:	4a07      	ldr	r2, [pc, #28]	@ (8003fd0 <UART_SetConfig+0x300>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	f003 0207 	and.w	r2, r3, #7
 8003fbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4422      	add	r2, r4
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	e34a      	b.n	800465e <UART_SetConfig+0x98e>
 8003fc8:	40011000 	.word	0x40011000
 8003fcc:	40011400 	.word	0x40011400
 8003fd0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f7ff fd24 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003fe6:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8003fea:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	@ 0x1a8
 8003fee:	4622      	mov	r2, r4
 8003ff0:	462b      	mov	r3, r5
 8003ff2:	1891      	adds	r1, r2, r2
 8003ff4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8003ff8:	415b      	adcs	r3, r3
 8003ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ffe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004002:	4621      	mov	r1, r4
 8004004:	eb12 0a01 	adds.w	sl, r2, r1
 8004008:	4629      	mov	r1, r5
 800400a:	eb43 0b01 	adc.w	fp, r3, r1
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800401a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800401e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004022:	4692      	mov	sl, r2
 8004024:	469b      	mov	fp, r3
 8004026:	4623      	mov	r3, r4
 8004028:	eb1a 0303 	adds.w	r3, sl, r3
 800402c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004030:	462b      	mov	r3, r5
 8004032:	eb4b 0303 	adc.w	r3, fp, r3
 8004036:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800403a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004046:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800404a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 800404e:	460b      	mov	r3, r1
 8004050:	18db      	adds	r3, r3, r3
 8004052:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004056:	4613      	mov	r3, r2
 8004058:	eb42 0303 	adc.w	r3, r2, r3
 800405c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004060:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8004064:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	@ 0x1a0
 8004068:	f7fc fcf0 	bl	8000a4c <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4b61      	ldr	r3, [pc, #388]	@ (80041f8 <UART_SetConfig+0x528>)
 8004072:	fba3 2302 	umull	r2, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	011c      	lsls	r4, r3, #4
 800407a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800407e:	2200      	movs	r2, #0
 8004080:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004084:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8004088:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	@ 0x190
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	1891      	adds	r1, r2, r2
 8004092:	67b9      	str	r1, [r7, #120]	@ 0x78
 8004094:	415b      	adcs	r3, r3
 8004096:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004098:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800409c:	4641      	mov	r1, r8
 800409e:	1851      	adds	r1, r2, r1
 80040a0:	6739      	str	r1, [r7, #112]	@ 0x70
 80040a2:	4649      	mov	r1, r9
 80040a4:	414b      	adcs	r3, r1
 80040a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	@ 0x70
 80040b4:	4659      	mov	r1, fp
 80040b6:	00cb      	lsls	r3, r1, #3
 80040b8:	4651      	mov	r1, sl
 80040ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040be:	4651      	mov	r1, sl
 80040c0:	00ca      	lsls	r2, r1, #3
 80040c2:	4610      	mov	r0, r2
 80040c4:	4619      	mov	r1, r3
 80040c6:	4603      	mov	r3, r0
 80040c8:	4642      	mov	r2, r8
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80040d0:	464b      	mov	r3, r9
 80040d2:	460a      	mov	r2, r1
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80040dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80040e8:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80040ec:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 80040f0:	460b      	mov	r3, r1
 80040f2:	18db      	adds	r3, r3, r3
 80040f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040f6:	4613      	mov	r3, r2
 80040f8:	eb42 0303 	adc.w	r3, r2, r3
 80040fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004102:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8004106:	f7fc fca1 	bl	8000a4c <__aeabi_uldivmod>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4611      	mov	r1, r2
 8004110:	4b39      	ldr	r3, [pc, #228]	@ (80041f8 <UART_SetConfig+0x528>)
 8004112:	fba3 2301 	umull	r2, r3, r3, r1
 8004116:	095b      	lsrs	r3, r3, #5
 8004118:	2264      	movs	r2, #100	@ 0x64
 800411a:	fb02 f303 	mul.w	r3, r2, r3
 800411e:	1acb      	subs	r3, r1, r3
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004126:	4b34      	ldr	r3, [pc, #208]	@ (80041f8 <UART_SetConfig+0x528>)
 8004128:	fba3 2302 	umull	r2, r3, r3, r2
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004134:	441c      	add	r4, r3
 8004136:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800413a:	2200      	movs	r2, #0
 800413c:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004140:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004144:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	@ 0x178
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	6639      	str	r1, [r7, #96]	@ 0x60
 8004150:	415b      	adcs	r3, r3
 8004152:	667b      	str	r3, [r7, #100]	@ 0x64
 8004154:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800418c:	464b      	mov	r3, r9
 800418e:	460a      	mov	r2, r1
 8004190:	eb42 0303 	adc.w	r3, r2, r3
 8004194:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004198:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80041a4:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80041a8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80041ac:	460b      	mov	r3, r1
 80041ae:	18db      	adds	r3, r3, r3
 80041b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b2:	4613      	mov	r3, r2
 80041b4:	eb42 0303 	adc.w	r3, r2, r3
 80041b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041be:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80041c2:	f7fc fc43 	bl	8000a4c <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <UART_SetConfig+0x528>)
 80041cc:	fba3 1302 	umull	r1, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	2164      	movs	r1, #100	@ 0x64
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	3332      	adds	r3, #50	@ 0x32
 80041de:	4a06      	ldr	r2, [pc, #24]	@ (80041f8 <UART_SetConfig+0x528>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	f003 0207 	and.w	r2, r3, #7
 80041ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4422      	add	r2, r4
 80041f2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80041f4:	e233      	b.n	800465e <UART_SetConfig+0x98e>
 80041f6:	bf00      	nop
 80041f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b8d      	ldr	r3, [pc, #564]	@ (8004438 <UART_SetConfig+0x768>)
 8004204:	429a      	cmp	r2, r3
 8004206:	d006      	beq.n	8004216 <UART_SetConfig+0x546>
 8004208:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4b8b      	ldr	r3, [pc, #556]	@ (800443c <UART_SetConfig+0x76c>)
 8004210:	429a      	cmp	r2, r3
 8004212:	f040 8117 	bne.w	8004444 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004216:	f7ff fc17 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 800421a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800421e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004222:	2200      	movs	r2, #0
 8004224:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004228:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 800422c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8004230:	4622      	mov	r2, r4
 8004232:	462b      	mov	r3, r5
 8004234:	1891      	adds	r1, r2, r2
 8004236:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004238:	415b      	adcs	r3, r3
 800423a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800423c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004240:	4621      	mov	r1, r4
 8004242:	eb12 0801 	adds.w	r8, r2, r1
 8004246:	4629      	mov	r1, r5
 8004248:	eb43 0901 	adc.w	r9, r3, r1
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800425c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004260:	4690      	mov	r8, r2
 8004262:	4699      	mov	r9, r3
 8004264:	4623      	mov	r3, r4
 8004266:	eb18 0303 	adds.w	r3, r8, r3
 800426a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800426e:	462b      	mov	r3, r5
 8004270:	eb49 0303 	adc.w	r3, r9, r3
 8004274:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004284:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	@ 0x150
 8004294:	4629      	mov	r1, r5
 8004296:	008b      	lsls	r3, r1, #2
 8004298:	4621      	mov	r1, r4
 800429a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800429e:	4621      	mov	r1, r4
 80042a0:	008a      	lsls	r2, r1, #2
 80042a2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 80042a6:	f7fc fbd1 	bl	8000a4c <__aeabi_uldivmod>
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	4b64      	ldr	r3, [pc, #400]	@ (8004440 <UART_SetConfig+0x770>)
 80042b0:	fba3 2302 	umull	r2, r3, r3, r2
 80042b4:	095b      	lsrs	r3, r3, #5
 80042b6:	011c      	lsls	r4, r3, #4
 80042b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80042c2:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80042c6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	@ 0x148
 80042ca:	4642      	mov	r2, r8
 80042cc:	464b      	mov	r3, r9
 80042ce:	1891      	adds	r1, r2, r2
 80042d0:	6439      	str	r1, [r7, #64]	@ 0x40
 80042d2:	415b      	adcs	r3, r3
 80042d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042da:	4641      	mov	r1, r8
 80042dc:	1851      	adds	r1, r2, r1
 80042de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80042e0:	4649      	mov	r1, r9
 80042e2:	414b      	adcs	r3, r1
 80042e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	@ 0x38
 80042f2:	4659      	mov	r1, fp
 80042f4:	00cb      	lsls	r3, r1, #3
 80042f6:	4651      	mov	r1, sl
 80042f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042fc:	4651      	mov	r1, sl
 80042fe:	00ca      	lsls	r2, r1, #3
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	4603      	mov	r3, r0
 8004306:	4642      	mov	r2, r8
 8004308:	189b      	adds	r3, r3, r2
 800430a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800430e:	464b      	mov	r3, r9
 8004310:	460a      	mov	r2, r1
 8004312:	eb42 0303 	adc.w	r3, r2, r3
 8004316:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800431a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004326:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	@ 0x138
 8004336:	4649      	mov	r1, r9
 8004338:	008b      	lsls	r3, r1, #2
 800433a:	4641      	mov	r1, r8
 800433c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004340:	4641      	mov	r1, r8
 8004342:	008a      	lsls	r2, r1, #2
 8004344:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8004348:	f7fc fb80 	bl	8000a4c <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4611      	mov	r1, r2
 8004352:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <UART_SetConfig+0x770>)
 8004354:	fba3 2301 	umull	r2, r3, r3, r1
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	2264      	movs	r2, #100	@ 0x64
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	1acb      	subs	r3, r1, r3
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	3332      	adds	r3, #50	@ 0x32
 8004366:	4a36      	ldr	r2, [pc, #216]	@ (8004440 <UART_SetConfig+0x770>)
 8004368:	fba2 2303 	umull	r2, r3, r2, r3
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004372:	441c      	add	r4, r3
 8004374:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800437e:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 8004382:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	@ 0x130
 8004386:	4642      	mov	r2, r8
 8004388:	464b      	mov	r3, r9
 800438a:	1891      	adds	r1, r2, r2
 800438c:	6339      	str	r1, [r7, #48]	@ 0x30
 800438e:	415b      	adcs	r3, r3
 8004390:	637b      	str	r3, [r7, #52]	@ 0x34
 8004392:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8004396:	4641      	mov	r1, r8
 8004398:	1851      	adds	r1, r2, r1
 800439a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800439c:	4649      	mov	r1, r9
 800439e:	414b      	adcs	r3, r1
 80043a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	@ 0x28
 80043ae:	4659      	mov	r1, fp
 80043b0:	00cb      	lsls	r3, r1, #3
 80043b2:	4651      	mov	r1, sl
 80043b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b8:	4651      	mov	r1, sl
 80043ba:	00ca      	lsls	r2, r1, #3
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	4603      	mov	r3, r0
 80043c2:	4642      	mov	r2, r8
 80043c4:	189b      	adds	r3, r3, r2
 80043c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80043ca:	464b      	mov	r3, r9
 80043cc:	460a      	mov	r2, r1
 80043ce:	eb42 0303 	adc.w	r3, r2, r3
 80043d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80043d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80043e2:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	@ 0x120
 80043f2:	4649      	mov	r1, r9
 80043f4:	008b      	lsls	r3, r1, #2
 80043f6:	4641      	mov	r1, r8
 80043f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043fc:	4641      	mov	r1, r8
 80043fe:	008a      	lsls	r2, r1, #2
 8004400:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8004404:	f7fc fb22 	bl	8000a4c <__aeabi_uldivmod>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <UART_SetConfig+0x770>)
 800440e:	fba3 1302 	umull	r1, r3, r3, r2
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	2164      	movs	r1, #100	@ 0x64
 8004416:	fb01 f303 	mul.w	r3, r1, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	3332      	adds	r3, #50	@ 0x32
 8004420:	4a07      	ldr	r2, [pc, #28]	@ (8004440 <UART_SetConfig+0x770>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	f003 020f 	and.w	r2, r3, #15
 800442c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4422      	add	r2, r4
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	e112      	b.n	800465e <UART_SetConfig+0x98e>
 8004438:	40011000 	.word	0x40011000
 800443c:	40011400 	.word	0x40011400
 8004440:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004444:	f7ff faec 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8004448:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800444c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004450:	2200      	movs	r2, #0
 8004452:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004456:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800445a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	@ 0x118
 800445e:	4642      	mov	r2, r8
 8004460:	464b      	mov	r3, r9
 8004462:	1891      	adds	r1, r2, r2
 8004464:	6239      	str	r1, [r7, #32]
 8004466:	415b      	adcs	r3, r3
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
 800446a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800446e:	4641      	mov	r1, r8
 8004470:	1854      	adds	r4, r2, r1
 8004472:	4649      	mov	r1, r9
 8004474:	eb43 0501 	adc.w	r5, r3, r1
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	00eb      	lsls	r3, r5, #3
 8004482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004486:	00e2      	lsls	r2, r4, #3
 8004488:	4614      	mov	r4, r2
 800448a:	461d      	mov	r5, r3
 800448c:	4643      	mov	r3, r8
 800448e:	18e3      	adds	r3, r4, r3
 8004490:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8004494:	464b      	mov	r3, r9
 8004496:	eb45 0303 	adc.w	r3, r5, r3
 800449a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800449e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80044aa:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	f04f 0300 	mov.w	r3, #0
 80044b6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 80044ba:	4629      	mov	r1, r5
 80044bc:	008b      	lsls	r3, r1, #2
 80044be:	4621      	mov	r1, r4
 80044c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044c4:	4621      	mov	r1, r4
 80044c6:	008a      	lsls	r2, r1, #2
 80044c8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80044cc:	f7fc fabe 	bl	8000a4c <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4b65      	ldr	r3, [pc, #404]	@ (800466c <UART_SetConfig+0x99c>)
 80044d6:	fba3 2302 	umull	r2, r3, r3, r2
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	011c      	lsls	r4, r3, #4
 80044de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80044e8:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80044ec:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	@ 0x100
 80044f0:	4642      	mov	r2, r8
 80044f2:	464b      	mov	r3, r9
 80044f4:	1891      	adds	r1, r2, r2
 80044f6:	61b9      	str	r1, [r7, #24]
 80044f8:	415b      	adcs	r3, r3
 80044fa:	61fb      	str	r3, [r7, #28]
 80044fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004500:	4641      	mov	r1, r8
 8004502:	1851      	adds	r1, r2, r1
 8004504:	6139      	str	r1, [r7, #16]
 8004506:	4649      	mov	r1, r9
 8004508:	414b      	adcs	r3, r1
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004518:	4659      	mov	r1, fp
 800451a:	00cb      	lsls	r3, r1, #3
 800451c:	4651      	mov	r1, sl
 800451e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004522:	4651      	mov	r1, sl
 8004524:	00ca      	lsls	r2, r1, #3
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	4603      	mov	r3, r0
 800452c:	4642      	mov	r2, r8
 800452e:	189b      	adds	r3, r3, r2
 8004530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004534:	464b      	mov	r3, r9
 8004536:	460a      	mov	r2, r1
 8004538:	eb42 0303 	adc.w	r3, r2, r3
 800453c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004540:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800454c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800455c:	4649      	mov	r1, r9
 800455e:	008b      	lsls	r3, r1, #2
 8004560:	4641      	mov	r1, r8
 8004562:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004566:	4641      	mov	r1, r8
 8004568:	008a      	lsls	r2, r1, #2
 800456a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800456e:	f7fc fa6d 	bl	8000a4c <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4611      	mov	r1, r2
 8004578:	4b3c      	ldr	r3, [pc, #240]	@ (800466c <UART_SetConfig+0x99c>)
 800457a:	fba3 2301 	umull	r2, r3, r3, r1
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	2264      	movs	r2, #100	@ 0x64
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	1acb      	subs	r3, r1, r3
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	3332      	adds	r3, #50	@ 0x32
 800458c:	4a37      	ldr	r2, [pc, #220]	@ (800466c <UART_SetConfig+0x99c>)
 800458e:	fba2 2303 	umull	r2, r3, r2, r3
 8004592:	095b      	lsrs	r3, r3, #5
 8004594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004598:	441c      	add	r4, r3
 800459a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045a4:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045a8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80045ac:	4642      	mov	r2, r8
 80045ae:	464b      	mov	r3, r9
 80045b0:	1891      	adds	r1, r2, r2
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	415b      	adcs	r3, r3
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045bc:	4641      	mov	r1, r8
 80045be:	1851      	adds	r1, r2, r1
 80045c0:	6039      	str	r1, [r7, #0]
 80045c2:	4649      	mov	r1, r9
 80045c4:	414b      	adcs	r3, r1
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045d4:	4659      	mov	r1, fp
 80045d6:	00cb      	lsls	r3, r1, #3
 80045d8:	4651      	mov	r1, sl
 80045da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045de:	4651      	mov	r1, sl
 80045e0:	00ca      	lsls	r2, r1, #3
 80045e2:	4610      	mov	r0, r2
 80045e4:	4619      	mov	r1, r3
 80045e6:	4603      	mov	r3, r0
 80045e8:	4642      	mov	r2, r8
 80045ea:	189b      	adds	r3, r3, r2
 80045ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045f0:	464b      	mov	r3, r9
 80045f2:	460a      	mov	r2, r1
 80045f4:	eb42 0303 	adc.w	r3, r2, r3
 80045f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004608:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8004618:	4649      	mov	r1, r9
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	4641      	mov	r1, r8
 800461e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004622:	4641      	mov	r1, r8
 8004624:	008a      	lsls	r2, r1, #2
 8004626:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800462a:	f7fc fa0f 	bl	8000a4c <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <UART_SetConfig+0x99c>)
 8004634:	fba3 1302 	umull	r1, r3, r3, r2
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	2164      	movs	r1, #100	@ 0x64
 800463c:	fb01 f303 	mul.w	r3, r1, r3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	3332      	adds	r3, #50	@ 0x32
 8004646:	4a09      	ldr	r2, [pc, #36]	@ (800466c <UART_SetConfig+0x99c>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	095b      	lsrs	r3, r3, #5
 800464e:	f003 020f 	and.w	r2, r3, #15
 8004652:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4422      	add	r2, r4
 800465a:	609a      	str	r2, [r3, #8]
}
 800465c:	e7ff      	b.n	800465e <UART_SetConfig+0x98e>
 800465e:	bf00      	nop
 8004660:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	51eb851f 	.word	0x51eb851f

08004670 <std>:
 8004670:	2300      	movs	r3, #0
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	e9c0 3300 	strd	r3, r3, [r0]
 800467a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800467e:	6083      	str	r3, [r0, #8]
 8004680:	8181      	strh	r1, [r0, #12]
 8004682:	6643      	str	r3, [r0, #100]	@ 0x64
 8004684:	81c2      	strh	r2, [r0, #14]
 8004686:	6183      	str	r3, [r0, #24]
 8004688:	4619      	mov	r1, r3
 800468a:	2208      	movs	r2, #8
 800468c:	305c      	adds	r0, #92	@ 0x5c
 800468e:	f000 f906 	bl	800489e <memset>
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <std+0x58>)
 8004694:	6263      	str	r3, [r4, #36]	@ 0x24
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <std+0x5c>)
 8004698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800469a:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <std+0x60>)
 800469c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <std+0x64>)
 80046a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <std+0x68>)
 80046a4:	6224      	str	r4, [r4, #32]
 80046a6:	429c      	cmp	r4, r3
 80046a8:	d006      	beq.n	80046b8 <std+0x48>
 80046aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046ae:	4294      	cmp	r4, r2
 80046b0:	d002      	beq.n	80046b8 <std+0x48>
 80046b2:	33d0      	adds	r3, #208	@ 0xd0
 80046b4:	429c      	cmp	r4, r3
 80046b6:	d105      	bne.n	80046c4 <std+0x54>
 80046b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c0:	f000 b966 	b.w	8004990 <__retarget_lock_init_recursive>
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	bf00      	nop
 80046c8:	08004819 	.word	0x08004819
 80046cc:	0800483b 	.word	0x0800483b
 80046d0:	08004873 	.word	0x08004873
 80046d4:	08004897 	.word	0x08004897
 80046d8:	2000027c 	.word	0x2000027c

080046dc <stdio_exit_handler>:
 80046dc:	4a02      	ldr	r2, [pc, #8]	@ (80046e8 <stdio_exit_handler+0xc>)
 80046de:	4903      	ldr	r1, [pc, #12]	@ (80046ec <stdio_exit_handler+0x10>)
 80046e0:	4803      	ldr	r0, [pc, #12]	@ (80046f0 <stdio_exit_handler+0x14>)
 80046e2:	f000 b869 	b.w	80047b8 <_fwalk_sglue>
 80046e6:	bf00      	nop
 80046e8:	2000000c 	.word	0x2000000c
 80046ec:	0800522d 	.word	0x0800522d
 80046f0:	2000001c 	.word	0x2000001c

080046f4 <cleanup_stdio>:
 80046f4:	6841      	ldr	r1, [r0, #4]
 80046f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <cleanup_stdio+0x34>)
 80046f8:	4299      	cmp	r1, r3
 80046fa:	b510      	push	{r4, lr}
 80046fc:	4604      	mov	r4, r0
 80046fe:	d001      	beq.n	8004704 <cleanup_stdio+0x10>
 8004700:	f000 fd94 	bl	800522c <_fflush_r>
 8004704:	68a1      	ldr	r1, [r4, #8]
 8004706:	4b09      	ldr	r3, [pc, #36]	@ (800472c <cleanup_stdio+0x38>)
 8004708:	4299      	cmp	r1, r3
 800470a:	d002      	beq.n	8004712 <cleanup_stdio+0x1e>
 800470c:	4620      	mov	r0, r4
 800470e:	f000 fd8d 	bl	800522c <_fflush_r>
 8004712:	68e1      	ldr	r1, [r4, #12]
 8004714:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <cleanup_stdio+0x3c>)
 8004716:	4299      	cmp	r1, r3
 8004718:	d004      	beq.n	8004724 <cleanup_stdio+0x30>
 800471a:	4620      	mov	r0, r4
 800471c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004720:	f000 bd84 	b.w	800522c <_fflush_r>
 8004724:	bd10      	pop	{r4, pc}
 8004726:	bf00      	nop
 8004728:	2000027c 	.word	0x2000027c
 800472c:	200002e4 	.word	0x200002e4
 8004730:	2000034c 	.word	0x2000034c

08004734 <global_stdio_init.part.0>:
 8004734:	b510      	push	{r4, lr}
 8004736:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <global_stdio_init.part.0+0x30>)
 8004738:	4c0b      	ldr	r4, [pc, #44]	@ (8004768 <global_stdio_init.part.0+0x34>)
 800473a:	4a0c      	ldr	r2, [pc, #48]	@ (800476c <global_stdio_init.part.0+0x38>)
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	4620      	mov	r0, r4
 8004740:	2200      	movs	r2, #0
 8004742:	2104      	movs	r1, #4
 8004744:	f7ff ff94 	bl	8004670 <std>
 8004748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800474c:	2201      	movs	r2, #1
 800474e:	2109      	movs	r1, #9
 8004750:	f7ff ff8e 	bl	8004670 <std>
 8004754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004758:	2202      	movs	r2, #2
 800475a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475e:	2112      	movs	r1, #18
 8004760:	f7ff bf86 	b.w	8004670 <std>
 8004764:	200003b4 	.word	0x200003b4
 8004768:	2000027c 	.word	0x2000027c
 800476c:	080046dd 	.word	0x080046dd

08004770 <__sfp_lock_acquire>:
 8004770:	4801      	ldr	r0, [pc, #4]	@ (8004778 <__sfp_lock_acquire+0x8>)
 8004772:	f000 b90e 	b.w	8004992 <__retarget_lock_acquire_recursive>
 8004776:	bf00      	nop
 8004778:	200003bd 	.word	0x200003bd

0800477c <__sfp_lock_release>:
 800477c:	4801      	ldr	r0, [pc, #4]	@ (8004784 <__sfp_lock_release+0x8>)
 800477e:	f000 b909 	b.w	8004994 <__retarget_lock_release_recursive>
 8004782:	bf00      	nop
 8004784:	200003bd 	.word	0x200003bd

08004788 <__sinit>:
 8004788:	b510      	push	{r4, lr}
 800478a:	4604      	mov	r4, r0
 800478c:	f7ff fff0 	bl	8004770 <__sfp_lock_acquire>
 8004790:	6a23      	ldr	r3, [r4, #32]
 8004792:	b11b      	cbz	r3, 800479c <__sinit+0x14>
 8004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004798:	f7ff bff0 	b.w	800477c <__sfp_lock_release>
 800479c:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <__sinit+0x28>)
 800479e:	6223      	str	r3, [r4, #32]
 80047a0:	4b04      	ldr	r3, [pc, #16]	@ (80047b4 <__sinit+0x2c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f5      	bne.n	8004794 <__sinit+0xc>
 80047a8:	f7ff ffc4 	bl	8004734 <global_stdio_init.part.0>
 80047ac:	e7f2      	b.n	8004794 <__sinit+0xc>
 80047ae:	bf00      	nop
 80047b0:	080046f5 	.word	0x080046f5
 80047b4:	200003b4 	.word	0x200003b4

080047b8 <_fwalk_sglue>:
 80047b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047bc:	4607      	mov	r7, r0
 80047be:	4688      	mov	r8, r1
 80047c0:	4614      	mov	r4, r2
 80047c2:	2600      	movs	r6, #0
 80047c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047c8:	f1b9 0901 	subs.w	r9, r9, #1
 80047cc:	d505      	bpl.n	80047da <_fwalk_sglue+0x22>
 80047ce:	6824      	ldr	r4, [r4, #0]
 80047d0:	2c00      	cmp	r4, #0
 80047d2:	d1f7      	bne.n	80047c4 <_fwalk_sglue+0xc>
 80047d4:	4630      	mov	r0, r6
 80047d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047da:	89ab      	ldrh	r3, [r5, #12]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d907      	bls.n	80047f0 <_fwalk_sglue+0x38>
 80047e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047e4:	3301      	adds	r3, #1
 80047e6:	d003      	beq.n	80047f0 <_fwalk_sglue+0x38>
 80047e8:	4629      	mov	r1, r5
 80047ea:	4638      	mov	r0, r7
 80047ec:	47c0      	blx	r8
 80047ee:	4306      	orrs	r6, r0
 80047f0:	3568      	adds	r5, #104	@ 0x68
 80047f2:	e7e9      	b.n	80047c8 <_fwalk_sglue+0x10>

080047f4 <iprintf>:
 80047f4:	b40f      	push	{r0, r1, r2, r3}
 80047f6:	b507      	push	{r0, r1, r2, lr}
 80047f8:	4906      	ldr	r1, [pc, #24]	@ (8004814 <iprintf+0x20>)
 80047fa:	ab04      	add	r3, sp, #16
 80047fc:	6808      	ldr	r0, [r1, #0]
 80047fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004802:	6881      	ldr	r1, [r0, #8]
 8004804:	9301      	str	r3, [sp, #4]
 8004806:	f000 f9e9 	bl	8004bdc <_vfiprintf_r>
 800480a:	b003      	add	sp, #12
 800480c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004810:	b004      	add	sp, #16
 8004812:	4770      	bx	lr
 8004814:	20000018 	.word	0x20000018

08004818 <__sread>:
 8004818:	b510      	push	{r4, lr}
 800481a:	460c      	mov	r4, r1
 800481c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004820:	f000 f868 	bl	80048f4 <_read_r>
 8004824:	2800      	cmp	r0, #0
 8004826:	bfab      	itete	ge
 8004828:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800482a:	89a3      	ldrhlt	r3, [r4, #12]
 800482c:	181b      	addge	r3, r3, r0
 800482e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004832:	bfac      	ite	ge
 8004834:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004836:	81a3      	strhlt	r3, [r4, #12]
 8004838:	bd10      	pop	{r4, pc}

0800483a <__swrite>:
 800483a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800483e:	461f      	mov	r7, r3
 8004840:	898b      	ldrh	r3, [r1, #12]
 8004842:	05db      	lsls	r3, r3, #23
 8004844:	4605      	mov	r5, r0
 8004846:	460c      	mov	r4, r1
 8004848:	4616      	mov	r6, r2
 800484a:	d505      	bpl.n	8004858 <__swrite+0x1e>
 800484c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004850:	2302      	movs	r3, #2
 8004852:	2200      	movs	r2, #0
 8004854:	f000 f83c 	bl	80048d0 <_lseek_r>
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800485e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004862:	81a3      	strh	r3, [r4, #12]
 8004864:	4632      	mov	r2, r6
 8004866:	463b      	mov	r3, r7
 8004868:	4628      	mov	r0, r5
 800486a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800486e:	f000 b853 	b.w	8004918 <_write_r>

08004872 <__sseek>:
 8004872:	b510      	push	{r4, lr}
 8004874:	460c      	mov	r4, r1
 8004876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800487a:	f000 f829 	bl	80048d0 <_lseek_r>
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	bf15      	itete	ne
 8004884:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800488a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800488e:	81a3      	strheq	r3, [r4, #12]
 8004890:	bf18      	it	ne
 8004892:	81a3      	strhne	r3, [r4, #12]
 8004894:	bd10      	pop	{r4, pc}

08004896 <__sclose>:
 8004896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800489a:	f000 b809 	b.w	80048b0 <_close_r>

0800489e <memset>:
 800489e:	4402      	add	r2, r0
 80048a0:	4603      	mov	r3, r0
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d100      	bne.n	80048a8 <memset+0xa>
 80048a6:	4770      	bx	lr
 80048a8:	f803 1b01 	strb.w	r1, [r3], #1
 80048ac:	e7f9      	b.n	80048a2 <memset+0x4>
	...

080048b0 <_close_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d06      	ldr	r5, [pc, #24]	@ (80048cc <_close_r+0x1c>)
 80048b4:	2300      	movs	r3, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fd f853 	bl	8001966 <_close>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_close_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_close_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	200003b8 	.word	0x200003b8

080048d0 <_lseek_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d07      	ldr	r5, [pc, #28]	@ (80048f0 <_lseek_r+0x20>)
 80048d4:	4604      	mov	r4, r0
 80048d6:	4608      	mov	r0, r1
 80048d8:	4611      	mov	r1, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	602a      	str	r2, [r5, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	f7fd f868 	bl	80019b4 <_lseek>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_lseek_r+0x1e>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_lseek_r+0x1e>
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	200003b8 	.word	0x200003b8

080048f4 <_read_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d07      	ldr	r5, [pc, #28]	@ (8004914 <_read_r+0x20>)
 80048f8:	4604      	mov	r4, r0
 80048fa:	4608      	mov	r0, r1
 80048fc:	4611      	mov	r1, r2
 80048fe:	2200      	movs	r2, #0
 8004900:	602a      	str	r2, [r5, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f7fd f812 	bl	800192c <_read>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_read_r+0x1e>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_read_r+0x1e>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	200003b8 	.word	0x200003b8

08004918 <_write_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4d07      	ldr	r5, [pc, #28]	@ (8004938 <_write_r+0x20>)
 800491c:	4604      	mov	r4, r0
 800491e:	4608      	mov	r0, r1
 8004920:	4611      	mov	r1, r2
 8004922:	2200      	movs	r2, #0
 8004924:	602a      	str	r2, [r5, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f7fc fe30 	bl	800158c <_write>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_write_r+0x1e>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_write_r+0x1e>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	200003b8 	.word	0x200003b8

0800493c <__errno>:
 800493c:	4b01      	ldr	r3, [pc, #4]	@ (8004944 <__errno+0x8>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000018 	.word	0x20000018

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	@ (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	@ (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	@ (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	@ (800498c <__libc_init_array+0x44>)
 800495c:	f000 fdb6 	bl	80054cc <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	08005558 	.word	0x08005558
 8004984:	08005558 	.word	0x08005558
 8004988:	08005558 	.word	0x08005558
 800498c:	0800555c 	.word	0x0800555c

08004990 <__retarget_lock_init_recursive>:
 8004990:	4770      	bx	lr

08004992 <__retarget_lock_acquire_recursive>:
 8004992:	4770      	bx	lr

08004994 <__retarget_lock_release_recursive>:
 8004994:	4770      	bx	lr
	...

08004998 <_free_r>:
 8004998:	b538      	push	{r3, r4, r5, lr}
 800499a:	4605      	mov	r5, r0
 800499c:	2900      	cmp	r1, #0
 800499e:	d041      	beq.n	8004a24 <_free_r+0x8c>
 80049a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049a4:	1f0c      	subs	r4, r1, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	bfb8      	it	lt
 80049aa:	18e4      	addlt	r4, r4, r3
 80049ac:	f000 f8e0 	bl	8004b70 <__malloc_lock>
 80049b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004a28 <_free_r+0x90>)
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	b933      	cbnz	r3, 80049c4 <_free_r+0x2c>
 80049b6:	6063      	str	r3, [r4, #4]
 80049b8:	6014      	str	r4, [r2, #0]
 80049ba:	4628      	mov	r0, r5
 80049bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049c0:	f000 b8dc 	b.w	8004b7c <__malloc_unlock>
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	d908      	bls.n	80049da <_free_r+0x42>
 80049c8:	6820      	ldr	r0, [r4, #0]
 80049ca:	1821      	adds	r1, r4, r0
 80049cc:	428b      	cmp	r3, r1
 80049ce:	bf01      	itttt	eq
 80049d0:	6819      	ldreq	r1, [r3, #0]
 80049d2:	685b      	ldreq	r3, [r3, #4]
 80049d4:	1809      	addeq	r1, r1, r0
 80049d6:	6021      	streq	r1, [r4, #0]
 80049d8:	e7ed      	b.n	80049b6 <_free_r+0x1e>
 80049da:	461a      	mov	r2, r3
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b10b      	cbz	r3, 80049e4 <_free_r+0x4c>
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d9fa      	bls.n	80049da <_free_r+0x42>
 80049e4:	6811      	ldr	r1, [r2, #0]
 80049e6:	1850      	adds	r0, r2, r1
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	d10b      	bne.n	8004a04 <_free_r+0x6c>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	4401      	add	r1, r0
 80049f0:	1850      	adds	r0, r2, r1
 80049f2:	4283      	cmp	r3, r0
 80049f4:	6011      	str	r1, [r2, #0]
 80049f6:	d1e0      	bne.n	80049ba <_free_r+0x22>
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	6053      	str	r3, [r2, #4]
 80049fe:	4408      	add	r0, r1
 8004a00:	6010      	str	r0, [r2, #0]
 8004a02:	e7da      	b.n	80049ba <_free_r+0x22>
 8004a04:	d902      	bls.n	8004a0c <_free_r+0x74>
 8004a06:	230c      	movs	r3, #12
 8004a08:	602b      	str	r3, [r5, #0]
 8004a0a:	e7d6      	b.n	80049ba <_free_r+0x22>
 8004a0c:	6820      	ldr	r0, [r4, #0]
 8004a0e:	1821      	adds	r1, r4, r0
 8004a10:	428b      	cmp	r3, r1
 8004a12:	bf04      	itt	eq
 8004a14:	6819      	ldreq	r1, [r3, #0]
 8004a16:	685b      	ldreq	r3, [r3, #4]
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	bf04      	itt	eq
 8004a1c:	1809      	addeq	r1, r1, r0
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	6054      	str	r4, [r2, #4]
 8004a22:	e7ca      	b.n	80049ba <_free_r+0x22>
 8004a24:	bd38      	pop	{r3, r4, r5, pc}
 8004a26:	bf00      	nop
 8004a28:	200003c4 	.word	0x200003c4

08004a2c <sbrk_aligned>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a6c <sbrk_aligned+0x40>)
 8004a30:	460c      	mov	r4, r1
 8004a32:	6831      	ldr	r1, [r6, #0]
 8004a34:	4605      	mov	r5, r0
 8004a36:	b911      	cbnz	r1, 8004a3e <sbrk_aligned+0x12>
 8004a38:	f000 fcb4 	bl	80053a4 <_sbrk_r>
 8004a3c:	6030      	str	r0, [r6, #0]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 fcaf 	bl	80053a4 <_sbrk_r>
 8004a46:	1c43      	adds	r3, r0, #1
 8004a48:	d103      	bne.n	8004a52 <sbrk_aligned+0x26>
 8004a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a4e:	4620      	mov	r0, r4
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
 8004a52:	1cc4      	adds	r4, r0, #3
 8004a54:	f024 0403 	bic.w	r4, r4, #3
 8004a58:	42a0      	cmp	r0, r4
 8004a5a:	d0f8      	beq.n	8004a4e <sbrk_aligned+0x22>
 8004a5c:	1a21      	subs	r1, r4, r0
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 fca0 	bl	80053a4 <_sbrk_r>
 8004a64:	3001      	adds	r0, #1
 8004a66:	d1f2      	bne.n	8004a4e <sbrk_aligned+0x22>
 8004a68:	e7ef      	b.n	8004a4a <sbrk_aligned+0x1e>
 8004a6a:	bf00      	nop
 8004a6c:	200003c0 	.word	0x200003c0

08004a70 <_malloc_r>:
 8004a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a74:	1ccd      	adds	r5, r1, #3
 8004a76:	f025 0503 	bic.w	r5, r5, #3
 8004a7a:	3508      	adds	r5, #8
 8004a7c:	2d0c      	cmp	r5, #12
 8004a7e:	bf38      	it	cc
 8004a80:	250c      	movcc	r5, #12
 8004a82:	2d00      	cmp	r5, #0
 8004a84:	4606      	mov	r6, r0
 8004a86:	db01      	blt.n	8004a8c <_malloc_r+0x1c>
 8004a88:	42a9      	cmp	r1, r5
 8004a8a:	d904      	bls.n	8004a96 <_malloc_r+0x26>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	6033      	str	r3, [r6, #0]
 8004a90:	2000      	movs	r0, #0
 8004a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b6c <_malloc_r+0xfc>
 8004a9a:	f000 f869 	bl	8004b70 <__malloc_lock>
 8004a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa2:	461c      	mov	r4, r3
 8004aa4:	bb44      	cbnz	r4, 8004af8 <_malloc_r+0x88>
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	f7ff ffbf 	bl	8004a2c <sbrk_aligned>
 8004aae:	1c43      	adds	r3, r0, #1
 8004ab0:	4604      	mov	r4, r0
 8004ab2:	d158      	bne.n	8004b66 <_malloc_r+0xf6>
 8004ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab8:	4627      	mov	r7, r4
 8004aba:	2f00      	cmp	r7, #0
 8004abc:	d143      	bne.n	8004b46 <_malloc_r+0xd6>
 8004abe:	2c00      	cmp	r4, #0
 8004ac0:	d04b      	beq.n	8004b5a <_malloc_r+0xea>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	eb04 0903 	add.w	r9, r4, r3
 8004acc:	f000 fc6a 	bl	80053a4 <_sbrk_r>
 8004ad0:	4581      	cmp	r9, r0
 8004ad2:	d142      	bne.n	8004b5a <_malloc_r+0xea>
 8004ad4:	6821      	ldr	r1, [r4, #0]
 8004ad6:	1a6d      	subs	r5, r5, r1
 8004ad8:	4629      	mov	r1, r5
 8004ada:	4630      	mov	r0, r6
 8004adc:	f7ff ffa6 	bl	8004a2c <sbrk_aligned>
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d03a      	beq.n	8004b5a <_malloc_r+0xea>
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	442b      	add	r3, r5
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	f8d8 3000 	ldr.w	r3, [r8]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	bb62      	cbnz	r2, 8004b4c <_malloc_r+0xdc>
 8004af2:	f8c8 7000 	str.w	r7, [r8]
 8004af6:	e00f      	b.n	8004b18 <_malloc_r+0xa8>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	1b52      	subs	r2, r2, r5
 8004afc:	d420      	bmi.n	8004b40 <_malloc_r+0xd0>
 8004afe:	2a0b      	cmp	r2, #11
 8004b00:	d917      	bls.n	8004b32 <_malloc_r+0xc2>
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	6025      	str	r5, [r4, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	6059      	strne	r1, [r3, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	bf08      	it	eq
 8004b10:	f8c8 1000 	streq.w	r1, [r8]
 8004b14:	5162      	str	r2, [r4, r5]
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 f82f 	bl	8004b7c <__malloc_unlock>
 8004b1e:	f104 000b 	add.w	r0, r4, #11
 8004b22:	1d23      	adds	r3, r4, #4
 8004b24:	f020 0007 	bic.w	r0, r0, #7
 8004b28:	1ac2      	subs	r2, r0, r3
 8004b2a:	bf1c      	itt	ne
 8004b2c:	1a1b      	subne	r3, r3, r0
 8004b2e:	50a3      	strne	r3, [r4, r2]
 8004b30:	e7af      	b.n	8004a92 <_malloc_r+0x22>
 8004b32:	6862      	ldr	r2, [r4, #4]
 8004b34:	42a3      	cmp	r3, r4
 8004b36:	bf0c      	ite	eq
 8004b38:	f8c8 2000 	streq.w	r2, [r8]
 8004b3c:	605a      	strne	r2, [r3, #4]
 8004b3e:	e7eb      	b.n	8004b18 <_malloc_r+0xa8>
 8004b40:	4623      	mov	r3, r4
 8004b42:	6864      	ldr	r4, [r4, #4]
 8004b44:	e7ae      	b.n	8004aa4 <_malloc_r+0x34>
 8004b46:	463c      	mov	r4, r7
 8004b48:	687f      	ldr	r7, [r7, #4]
 8004b4a:	e7b6      	b.n	8004aba <_malloc_r+0x4a>
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	42a3      	cmp	r3, r4
 8004b52:	d1fb      	bne.n	8004b4c <_malloc_r+0xdc>
 8004b54:	2300      	movs	r3, #0
 8004b56:	6053      	str	r3, [r2, #4]
 8004b58:	e7de      	b.n	8004b18 <_malloc_r+0xa8>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	6033      	str	r3, [r6, #0]
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f000 f80c 	bl	8004b7c <__malloc_unlock>
 8004b64:	e794      	b.n	8004a90 <_malloc_r+0x20>
 8004b66:	6005      	str	r5, [r0, #0]
 8004b68:	e7d6      	b.n	8004b18 <_malloc_r+0xa8>
 8004b6a:	bf00      	nop
 8004b6c:	200003c4 	.word	0x200003c4

08004b70 <__malloc_lock>:
 8004b70:	4801      	ldr	r0, [pc, #4]	@ (8004b78 <__malloc_lock+0x8>)
 8004b72:	f7ff bf0e 	b.w	8004992 <__retarget_lock_acquire_recursive>
 8004b76:	bf00      	nop
 8004b78:	200003bc 	.word	0x200003bc

08004b7c <__malloc_unlock>:
 8004b7c:	4801      	ldr	r0, [pc, #4]	@ (8004b84 <__malloc_unlock+0x8>)
 8004b7e:	f7ff bf09 	b.w	8004994 <__retarget_lock_release_recursive>
 8004b82:	bf00      	nop
 8004b84:	200003bc 	.word	0x200003bc

08004b88 <__sfputc_r>:
 8004b88:	6893      	ldr	r3, [r2, #8]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	b410      	push	{r4}
 8004b90:	6093      	str	r3, [r2, #8]
 8004b92:	da08      	bge.n	8004ba6 <__sfputc_r+0x1e>
 8004b94:	6994      	ldr	r4, [r2, #24]
 8004b96:	42a3      	cmp	r3, r4
 8004b98:	db01      	blt.n	8004b9e <__sfputc_r+0x16>
 8004b9a:	290a      	cmp	r1, #10
 8004b9c:	d103      	bne.n	8004ba6 <__sfputc_r+0x1e>
 8004b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ba2:	f000 bb6b 	b.w	800527c <__swbuf_r>
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	1c58      	adds	r0, r3, #1
 8004baa:	6010      	str	r0, [r2, #0]
 8004bac:	7019      	strb	r1, [r3, #0]
 8004bae:	4608      	mov	r0, r1
 8004bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <__sfputs_r>:
 8004bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb8:	4606      	mov	r6, r0
 8004bba:	460f      	mov	r7, r1
 8004bbc:	4614      	mov	r4, r2
 8004bbe:	18d5      	adds	r5, r2, r3
 8004bc0:	42ac      	cmp	r4, r5
 8004bc2:	d101      	bne.n	8004bc8 <__sfputs_r+0x12>
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	e007      	b.n	8004bd8 <__sfputs_r+0x22>
 8004bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bcc:	463a      	mov	r2, r7
 8004bce:	4630      	mov	r0, r6
 8004bd0:	f7ff ffda 	bl	8004b88 <__sfputc_r>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d1f3      	bne.n	8004bc0 <__sfputs_r+0xa>
 8004bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bdc <_vfiprintf_r>:
 8004bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be0:	460d      	mov	r5, r1
 8004be2:	b09d      	sub	sp, #116	@ 0x74
 8004be4:	4614      	mov	r4, r2
 8004be6:	4698      	mov	r8, r3
 8004be8:	4606      	mov	r6, r0
 8004bea:	b118      	cbz	r0, 8004bf4 <_vfiprintf_r+0x18>
 8004bec:	6a03      	ldr	r3, [r0, #32]
 8004bee:	b90b      	cbnz	r3, 8004bf4 <_vfiprintf_r+0x18>
 8004bf0:	f7ff fdca 	bl	8004788 <__sinit>
 8004bf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004bf6:	07d9      	lsls	r1, r3, #31
 8004bf8:	d405      	bmi.n	8004c06 <_vfiprintf_r+0x2a>
 8004bfa:	89ab      	ldrh	r3, [r5, #12]
 8004bfc:	059a      	lsls	r2, r3, #22
 8004bfe:	d402      	bmi.n	8004c06 <_vfiprintf_r+0x2a>
 8004c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c02:	f7ff fec6 	bl	8004992 <__retarget_lock_acquire_recursive>
 8004c06:	89ab      	ldrh	r3, [r5, #12]
 8004c08:	071b      	lsls	r3, r3, #28
 8004c0a:	d501      	bpl.n	8004c10 <_vfiprintf_r+0x34>
 8004c0c:	692b      	ldr	r3, [r5, #16]
 8004c0e:	b99b      	cbnz	r3, 8004c38 <_vfiprintf_r+0x5c>
 8004c10:	4629      	mov	r1, r5
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 fb70 	bl	80052f8 <__swsetup_r>
 8004c18:	b170      	cbz	r0, 8004c38 <_vfiprintf_r+0x5c>
 8004c1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c1c:	07dc      	lsls	r4, r3, #31
 8004c1e:	d504      	bpl.n	8004c2a <_vfiprintf_r+0x4e>
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295
 8004c24:	b01d      	add	sp, #116	@ 0x74
 8004c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2a:	89ab      	ldrh	r3, [r5, #12]
 8004c2c:	0598      	lsls	r0, r3, #22
 8004c2e:	d4f7      	bmi.n	8004c20 <_vfiprintf_r+0x44>
 8004c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c32:	f7ff feaf 	bl	8004994 <__retarget_lock_release_recursive>
 8004c36:	e7f3      	b.n	8004c20 <_vfiprintf_r+0x44>
 8004c38:	2300      	movs	r3, #0
 8004c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c42:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c46:	2330      	movs	r3, #48	@ 0x30
 8004c48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004df8 <_vfiprintf_r+0x21c>
 8004c4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c50:	f04f 0901 	mov.w	r9, #1
 8004c54:	4623      	mov	r3, r4
 8004c56:	469a      	mov	sl, r3
 8004c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c5c:	b10a      	cbz	r2, 8004c62 <_vfiprintf_r+0x86>
 8004c5e:	2a25      	cmp	r2, #37	@ 0x25
 8004c60:	d1f9      	bne.n	8004c56 <_vfiprintf_r+0x7a>
 8004c62:	ebba 0b04 	subs.w	fp, sl, r4
 8004c66:	d00b      	beq.n	8004c80 <_vfiprintf_r+0xa4>
 8004c68:	465b      	mov	r3, fp
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff ffa1 	bl	8004bb6 <__sfputs_r>
 8004c74:	3001      	adds	r0, #1
 8004c76:	f000 80a7 	beq.w	8004dc8 <_vfiprintf_r+0x1ec>
 8004c7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c7c:	445a      	add	r2, fp
 8004c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c80:	f89a 3000 	ldrb.w	r3, [sl]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 809f 	beq.w	8004dc8 <_vfiprintf_r+0x1ec>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c94:	f10a 0a01 	add.w	sl, sl, #1
 8004c98:	9304      	str	r3, [sp, #16]
 8004c9a:	9307      	str	r3, [sp, #28]
 8004c9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ca0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ca2:	4654      	mov	r4, sl
 8004ca4:	2205      	movs	r2, #5
 8004ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004caa:	4853      	ldr	r0, [pc, #332]	@ (8004df8 <_vfiprintf_r+0x21c>)
 8004cac:	f7fb fa90 	bl	80001d0 <memchr>
 8004cb0:	9a04      	ldr	r2, [sp, #16]
 8004cb2:	b9d8      	cbnz	r0, 8004cec <_vfiprintf_r+0x110>
 8004cb4:	06d1      	lsls	r1, r2, #27
 8004cb6:	bf44      	itt	mi
 8004cb8:	2320      	movmi	r3, #32
 8004cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cbe:	0713      	lsls	r3, r2, #28
 8004cc0:	bf44      	itt	mi
 8004cc2:	232b      	movmi	r3, #43	@ 0x2b
 8004cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cce:	d015      	beq.n	8004cfc <_vfiprintf_r+0x120>
 8004cd0:	9a07      	ldr	r2, [sp, #28]
 8004cd2:	4654      	mov	r4, sl
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	f04f 0c0a 	mov.w	ip, #10
 8004cda:	4621      	mov	r1, r4
 8004cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ce0:	3b30      	subs	r3, #48	@ 0x30
 8004ce2:	2b09      	cmp	r3, #9
 8004ce4:	d94b      	bls.n	8004d7e <_vfiprintf_r+0x1a2>
 8004ce6:	b1b0      	cbz	r0, 8004d16 <_vfiprintf_r+0x13a>
 8004ce8:	9207      	str	r2, [sp, #28]
 8004cea:	e014      	b.n	8004d16 <_vfiprintf_r+0x13a>
 8004cec:	eba0 0308 	sub.w	r3, r0, r8
 8004cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	9304      	str	r3, [sp, #16]
 8004cf8:	46a2      	mov	sl, r4
 8004cfa:	e7d2      	b.n	8004ca2 <_vfiprintf_r+0xc6>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	1d19      	adds	r1, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	9103      	str	r1, [sp, #12]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bfbb      	ittet	lt
 8004d08:	425b      	neglt	r3, r3
 8004d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d0e:	9307      	strge	r3, [sp, #28]
 8004d10:	9307      	strlt	r3, [sp, #28]
 8004d12:	bfb8      	it	lt
 8004d14:	9204      	strlt	r2, [sp, #16]
 8004d16:	7823      	ldrb	r3, [r4, #0]
 8004d18:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d1a:	d10a      	bne.n	8004d32 <_vfiprintf_r+0x156>
 8004d1c:	7863      	ldrb	r3, [r4, #1]
 8004d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d20:	d132      	bne.n	8004d88 <_vfiprintf_r+0x1ac>
 8004d22:	9b03      	ldr	r3, [sp, #12]
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	9203      	str	r2, [sp, #12]
 8004d2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d2e:	3402      	adds	r4, #2
 8004d30:	9305      	str	r3, [sp, #20]
 8004d32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e08 <_vfiprintf_r+0x22c>
 8004d36:	7821      	ldrb	r1, [r4, #0]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	f7fb fa48 	bl	80001d0 <memchr>
 8004d40:	b138      	cbz	r0, 8004d52 <_vfiprintf_r+0x176>
 8004d42:	9b04      	ldr	r3, [sp, #16]
 8004d44:	eba0 000a 	sub.w	r0, r0, sl
 8004d48:	2240      	movs	r2, #64	@ 0x40
 8004d4a:	4082      	lsls	r2, r0
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	3401      	adds	r4, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d56:	4829      	ldr	r0, [pc, #164]	@ (8004dfc <_vfiprintf_r+0x220>)
 8004d58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d5c:	2206      	movs	r2, #6
 8004d5e:	f7fb fa37 	bl	80001d0 <memchr>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d03f      	beq.n	8004de6 <_vfiprintf_r+0x20a>
 8004d66:	4b26      	ldr	r3, [pc, #152]	@ (8004e00 <_vfiprintf_r+0x224>)
 8004d68:	bb1b      	cbnz	r3, 8004db2 <_vfiprintf_r+0x1d6>
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	3307      	adds	r3, #7
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	3308      	adds	r3, #8
 8004d74:	9303      	str	r3, [sp, #12]
 8004d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d78:	443b      	add	r3, r7
 8004d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d7c:	e76a      	b.n	8004c54 <_vfiprintf_r+0x78>
 8004d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d82:	460c      	mov	r4, r1
 8004d84:	2001      	movs	r0, #1
 8004d86:	e7a8      	b.n	8004cda <_vfiprintf_r+0xfe>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	3401      	adds	r4, #1
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4620      	mov	r0, r4
 8004d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d9a:	3a30      	subs	r2, #48	@ 0x30
 8004d9c:	2a09      	cmp	r2, #9
 8004d9e:	d903      	bls.n	8004da8 <_vfiprintf_r+0x1cc>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0c6      	beq.n	8004d32 <_vfiprintf_r+0x156>
 8004da4:	9105      	str	r1, [sp, #20]
 8004da6:	e7c4      	b.n	8004d32 <_vfiprintf_r+0x156>
 8004da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dac:	4604      	mov	r4, r0
 8004dae:	2301      	movs	r3, #1
 8004db0:	e7f0      	b.n	8004d94 <_vfiprintf_r+0x1b8>
 8004db2:	ab03      	add	r3, sp, #12
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	462a      	mov	r2, r5
 8004db8:	4b12      	ldr	r3, [pc, #72]	@ (8004e04 <_vfiprintf_r+0x228>)
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f3af 8000 	nop.w
 8004dc2:	4607      	mov	r7, r0
 8004dc4:	1c78      	adds	r0, r7, #1
 8004dc6:	d1d6      	bne.n	8004d76 <_vfiprintf_r+0x19a>
 8004dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dca:	07d9      	lsls	r1, r3, #31
 8004dcc:	d405      	bmi.n	8004dda <_vfiprintf_r+0x1fe>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	059a      	lsls	r2, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_vfiprintf_r+0x1fe>
 8004dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004dd6:	f7ff fddd 	bl	8004994 <__retarget_lock_release_recursive>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	065b      	lsls	r3, r3, #25
 8004dde:	f53f af1f 	bmi.w	8004c20 <_vfiprintf_r+0x44>
 8004de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004de4:	e71e      	b.n	8004c24 <_vfiprintf_r+0x48>
 8004de6:	ab03      	add	r3, sp, #12
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4b05      	ldr	r3, [pc, #20]	@ (8004e04 <_vfiprintf_r+0x228>)
 8004dee:	a904      	add	r1, sp, #16
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 f879 	bl	8004ee8 <_printf_i>
 8004df6:	e7e4      	b.n	8004dc2 <_vfiprintf_r+0x1e6>
 8004df8:	0800551c 	.word	0x0800551c
 8004dfc:	08005526 	.word	0x08005526
 8004e00:	00000000 	.word	0x00000000
 8004e04:	08004bb7 	.word	0x08004bb7
 8004e08:	08005522 	.word	0x08005522

08004e0c <_printf_common>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	4616      	mov	r6, r2
 8004e12:	4698      	mov	r8, r3
 8004e14:	688a      	ldr	r2, [r1, #8]
 8004e16:	690b      	ldr	r3, [r1, #16]
 8004e18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfb8      	it	lt
 8004e20:	4613      	movlt	r3, r2
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e28:	4607      	mov	r7, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	b10a      	cbz	r2, 8004e32 <_printf_common+0x26>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	0699      	lsls	r1, r3, #26
 8004e36:	bf42      	ittt	mi
 8004e38:	6833      	ldrmi	r3, [r6, #0]
 8004e3a:	3302      	addmi	r3, #2
 8004e3c:	6033      	strmi	r3, [r6, #0]
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	f015 0506 	ands.w	r5, r5, #6
 8004e44:	d106      	bne.n	8004e54 <_printf_common+0x48>
 8004e46:	f104 0a19 	add.w	sl, r4, #25
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	6832      	ldr	r2, [r6, #0]
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc26      	bgt.n	8004ea2 <_printf_common+0x96>
 8004e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	3b00      	subs	r3, #0
 8004e5c:	bf18      	it	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	0692      	lsls	r2, r2, #26
 8004e62:	d42b      	bmi.n	8004ebc <_printf_common+0xb0>
 8004e64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e68:	4641      	mov	r1, r8
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	47c8      	blx	r9
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d01e      	beq.n	8004eb0 <_printf_common+0xa4>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	6922      	ldr	r2, [r4, #16]
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf02      	ittt	eq
 8004e7e:	68e5      	ldreq	r5, [r4, #12]
 8004e80:	6833      	ldreq	r3, [r6, #0]
 8004e82:	1aed      	subeq	r5, r5, r3
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	bf0c      	ite	eq
 8004e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e8c:	2500      	movne	r5, #0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfc4      	itt	gt
 8004e92:	1a9b      	subgt	r3, r3, r2
 8004e94:	18ed      	addgt	r5, r5, r3
 8004e96:	2600      	movs	r6, #0
 8004e98:	341a      	adds	r4, #26
 8004e9a:	42b5      	cmp	r5, r6
 8004e9c:	d11a      	bne.n	8004ed4 <_printf_common+0xc8>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	e008      	b.n	8004eb4 <_printf_common+0xa8>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	47c8      	blx	r9
 8004eac:	3001      	adds	r0, #1
 8004eae:	d103      	bne.n	8004eb8 <_printf_common+0xac>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7c6      	b.n	8004e4a <_printf_common+0x3e>
 8004ebc:	18e1      	adds	r1, r4, r3
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	2030      	movs	r0, #48	@ 0x30
 8004ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ec6:	4422      	add	r2, r4
 8004ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	e7c7      	b.n	8004e64 <_printf_common+0x58>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	4641      	mov	r1, r8
 8004eda:	4638      	mov	r0, r7
 8004edc:	47c8      	blx	r9
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d0e6      	beq.n	8004eb0 <_printf_common+0xa4>
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7d9      	b.n	8004e9a <_printf_common+0x8e>
	...

08004ee8 <_printf_i>:
 8004ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	7e0f      	ldrb	r7, [r1, #24]
 8004eee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ef0:	2f78      	cmp	r7, #120	@ 0x78
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	469a      	mov	sl, r3
 8004efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004efe:	d807      	bhi.n	8004f10 <_printf_i+0x28>
 8004f00:	2f62      	cmp	r7, #98	@ 0x62
 8004f02:	d80a      	bhi.n	8004f1a <_printf_i+0x32>
 8004f04:	2f00      	cmp	r7, #0
 8004f06:	f000 80d1 	beq.w	80050ac <_printf_i+0x1c4>
 8004f0a:	2f58      	cmp	r7, #88	@ 0x58
 8004f0c:	f000 80b8 	beq.w	8005080 <_printf_i+0x198>
 8004f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f18:	e03a      	b.n	8004f90 <_printf_i+0xa8>
 8004f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f1e:	2b15      	cmp	r3, #21
 8004f20:	d8f6      	bhi.n	8004f10 <_printf_i+0x28>
 8004f22:	a101      	add	r1, pc, #4	@ (adr r1, 8004f28 <_printf_i+0x40>)
 8004f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f28:	08004f81 	.word	0x08004f81
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08004f11 	.word	0x08004f11
 8004f34:	08004f11 	.word	0x08004f11
 8004f38:	08004f11 	.word	0x08004f11
 8004f3c:	08004f11 	.word	0x08004f11
 8004f40:	08004f95 	.word	0x08004f95
 8004f44:	08004f11 	.word	0x08004f11
 8004f48:	08004f11 	.word	0x08004f11
 8004f4c:	08004f11 	.word	0x08004f11
 8004f50:	08004f11 	.word	0x08004f11
 8004f54:	08005093 	.word	0x08005093
 8004f58:	08004fbf 	.word	0x08004fbf
 8004f5c:	0800504d 	.word	0x0800504d
 8004f60:	08004f11 	.word	0x08004f11
 8004f64:	08004f11 	.word	0x08004f11
 8004f68:	080050b5 	.word	0x080050b5
 8004f6c:	08004f11 	.word	0x08004f11
 8004f70:	08004fbf 	.word	0x08004fbf
 8004f74:	08004f11 	.word	0x08004f11
 8004f78:	08004f11 	.word	0x08004f11
 8004f7c:	08005055 	.word	0x08005055
 8004f80:	6833      	ldr	r3, [r6, #0]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6032      	str	r2, [r6, #0]
 8004f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f90:	2301      	movs	r3, #1
 8004f92:	e09c      	b.n	80050ce <_printf_i+0x1e6>
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	6820      	ldr	r0, [r4, #0]
 8004f98:	1d19      	adds	r1, r3, #4
 8004f9a:	6031      	str	r1, [r6, #0]
 8004f9c:	0606      	lsls	r6, r0, #24
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_i+0xbc>
 8004fa0:	681d      	ldr	r5, [r3, #0]
 8004fa2:	e003      	b.n	8004fac <_printf_i+0xc4>
 8004fa4:	0645      	lsls	r5, r0, #25
 8004fa6:	d5fb      	bpl.n	8004fa0 <_printf_i+0xb8>
 8004fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fac:	2d00      	cmp	r5, #0
 8004fae:	da03      	bge.n	8004fb8 <_printf_i+0xd0>
 8004fb0:	232d      	movs	r3, #45	@ 0x2d
 8004fb2:	426d      	negs	r5, r5
 8004fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb8:	4858      	ldr	r0, [pc, #352]	@ (800511c <_printf_i+0x234>)
 8004fba:	230a      	movs	r3, #10
 8004fbc:	e011      	b.n	8004fe2 <_printf_i+0xfa>
 8004fbe:	6821      	ldr	r1, [r4, #0]
 8004fc0:	6833      	ldr	r3, [r6, #0]
 8004fc2:	0608      	lsls	r0, r1, #24
 8004fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fc8:	d402      	bmi.n	8004fd0 <_printf_i+0xe8>
 8004fca:	0649      	lsls	r1, r1, #25
 8004fcc:	bf48      	it	mi
 8004fce:	b2ad      	uxthmi	r5, r5
 8004fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fd2:	4852      	ldr	r0, [pc, #328]	@ (800511c <_printf_i+0x234>)
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	bf14      	ite	ne
 8004fd8:	230a      	movne	r3, #10
 8004fda:	2308      	moveq	r3, #8
 8004fdc:	2100      	movs	r1, #0
 8004fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fe2:	6866      	ldr	r6, [r4, #4]
 8004fe4:	60a6      	str	r6, [r4, #8]
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	db05      	blt.n	8004ff6 <_printf_i+0x10e>
 8004fea:	6821      	ldr	r1, [r4, #0]
 8004fec:	432e      	orrs	r6, r5
 8004fee:	f021 0104 	bic.w	r1, r1, #4
 8004ff2:	6021      	str	r1, [r4, #0]
 8004ff4:	d04b      	beq.n	800508e <_printf_i+0x1a6>
 8004ff6:	4616      	mov	r6, r2
 8004ff8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ffc:	fb03 5711 	mls	r7, r3, r1, r5
 8005000:	5dc7      	ldrb	r7, [r0, r7]
 8005002:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005006:	462f      	mov	r7, r5
 8005008:	42bb      	cmp	r3, r7
 800500a:	460d      	mov	r5, r1
 800500c:	d9f4      	bls.n	8004ff8 <_printf_i+0x110>
 800500e:	2b08      	cmp	r3, #8
 8005010:	d10b      	bne.n	800502a <_printf_i+0x142>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	07df      	lsls	r7, r3, #31
 8005016:	d508      	bpl.n	800502a <_printf_i+0x142>
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	6861      	ldr	r1, [r4, #4]
 800501c:	4299      	cmp	r1, r3
 800501e:	bfde      	ittt	le
 8005020:	2330      	movle	r3, #48	@ 0x30
 8005022:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005026:	f106 36ff 	addle.w	r6, r6, #4294967295
 800502a:	1b92      	subs	r2, r2, r6
 800502c:	6122      	str	r2, [r4, #16]
 800502e:	f8cd a000 	str.w	sl, [sp]
 8005032:	464b      	mov	r3, r9
 8005034:	aa03      	add	r2, sp, #12
 8005036:	4621      	mov	r1, r4
 8005038:	4640      	mov	r0, r8
 800503a:	f7ff fee7 	bl	8004e0c <_printf_common>
 800503e:	3001      	adds	r0, #1
 8005040:	d14a      	bne.n	80050d8 <_printf_i+0x1f0>
 8005042:	f04f 30ff 	mov.w	r0, #4294967295
 8005046:	b004      	add	sp, #16
 8005048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	f043 0320 	orr.w	r3, r3, #32
 8005052:	6023      	str	r3, [r4, #0]
 8005054:	4832      	ldr	r0, [pc, #200]	@ (8005120 <_printf_i+0x238>)
 8005056:	2778      	movs	r7, #120	@ 0x78
 8005058:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	061f      	lsls	r7, r3, #24
 8005062:	f851 5b04 	ldr.w	r5, [r1], #4
 8005066:	d402      	bmi.n	800506e <_printf_i+0x186>
 8005068:	065f      	lsls	r7, r3, #25
 800506a:	bf48      	it	mi
 800506c:	b2ad      	uxthmi	r5, r5
 800506e:	6031      	str	r1, [r6, #0]
 8005070:	07d9      	lsls	r1, r3, #31
 8005072:	bf44      	itt	mi
 8005074:	f043 0320 	orrmi.w	r3, r3, #32
 8005078:	6023      	strmi	r3, [r4, #0]
 800507a:	b11d      	cbz	r5, 8005084 <_printf_i+0x19c>
 800507c:	2310      	movs	r3, #16
 800507e:	e7ad      	b.n	8004fdc <_printf_i+0xf4>
 8005080:	4826      	ldr	r0, [pc, #152]	@ (800511c <_printf_i+0x234>)
 8005082:	e7e9      	b.n	8005058 <_printf_i+0x170>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	e7f6      	b.n	800507c <_printf_i+0x194>
 800508e:	4616      	mov	r6, r2
 8005090:	e7bd      	b.n	800500e <_printf_i+0x126>
 8005092:	6833      	ldr	r3, [r6, #0]
 8005094:	6825      	ldr	r5, [r4, #0]
 8005096:	6961      	ldr	r1, [r4, #20]
 8005098:	1d18      	adds	r0, r3, #4
 800509a:	6030      	str	r0, [r6, #0]
 800509c:	062e      	lsls	r6, r5, #24
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	d501      	bpl.n	80050a6 <_printf_i+0x1be>
 80050a2:	6019      	str	r1, [r3, #0]
 80050a4:	e002      	b.n	80050ac <_printf_i+0x1c4>
 80050a6:	0668      	lsls	r0, r5, #25
 80050a8:	d5fb      	bpl.n	80050a2 <_printf_i+0x1ba>
 80050aa:	8019      	strh	r1, [r3, #0]
 80050ac:	2300      	movs	r3, #0
 80050ae:	6123      	str	r3, [r4, #16]
 80050b0:	4616      	mov	r6, r2
 80050b2:	e7bc      	b.n	800502e <_printf_i+0x146>
 80050b4:	6833      	ldr	r3, [r6, #0]
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	6032      	str	r2, [r6, #0]
 80050ba:	681e      	ldr	r6, [r3, #0]
 80050bc:	6862      	ldr	r2, [r4, #4]
 80050be:	2100      	movs	r1, #0
 80050c0:	4630      	mov	r0, r6
 80050c2:	f7fb f885 	bl	80001d0 <memchr>
 80050c6:	b108      	cbz	r0, 80050cc <_printf_i+0x1e4>
 80050c8:	1b80      	subs	r0, r0, r6
 80050ca:	6060      	str	r0, [r4, #4]
 80050cc:	6863      	ldr	r3, [r4, #4]
 80050ce:	6123      	str	r3, [r4, #16]
 80050d0:	2300      	movs	r3, #0
 80050d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050d6:	e7aa      	b.n	800502e <_printf_i+0x146>
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	4632      	mov	r2, r6
 80050dc:	4649      	mov	r1, r9
 80050de:	4640      	mov	r0, r8
 80050e0:	47d0      	blx	sl
 80050e2:	3001      	adds	r0, #1
 80050e4:	d0ad      	beq.n	8005042 <_printf_i+0x15a>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	079b      	lsls	r3, r3, #30
 80050ea:	d413      	bmi.n	8005114 <_printf_i+0x22c>
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	4298      	cmp	r0, r3
 80050f2:	bfb8      	it	lt
 80050f4:	4618      	movlt	r0, r3
 80050f6:	e7a6      	b.n	8005046 <_printf_i+0x15e>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4632      	mov	r2, r6
 80050fc:	4649      	mov	r1, r9
 80050fe:	4640      	mov	r0, r8
 8005100:	47d0      	blx	sl
 8005102:	3001      	adds	r0, #1
 8005104:	d09d      	beq.n	8005042 <_printf_i+0x15a>
 8005106:	3501      	adds	r5, #1
 8005108:	68e3      	ldr	r3, [r4, #12]
 800510a:	9903      	ldr	r1, [sp, #12]
 800510c:	1a5b      	subs	r3, r3, r1
 800510e:	42ab      	cmp	r3, r5
 8005110:	dcf2      	bgt.n	80050f8 <_printf_i+0x210>
 8005112:	e7eb      	b.n	80050ec <_printf_i+0x204>
 8005114:	2500      	movs	r5, #0
 8005116:	f104 0619 	add.w	r6, r4, #25
 800511a:	e7f5      	b.n	8005108 <_printf_i+0x220>
 800511c:	0800552d 	.word	0x0800552d
 8005120:	0800553e 	.word	0x0800553e

08005124 <__sflush_r>:
 8005124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512c:	0716      	lsls	r6, r2, #28
 800512e:	4605      	mov	r5, r0
 8005130:	460c      	mov	r4, r1
 8005132:	d454      	bmi.n	80051de <__sflush_r+0xba>
 8005134:	684b      	ldr	r3, [r1, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	dc02      	bgt.n	8005140 <__sflush_r+0x1c>
 800513a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	dd48      	ble.n	80051d2 <__sflush_r+0xae>
 8005140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005142:	2e00      	cmp	r6, #0
 8005144:	d045      	beq.n	80051d2 <__sflush_r+0xae>
 8005146:	2300      	movs	r3, #0
 8005148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800514c:	682f      	ldr	r7, [r5, #0]
 800514e:	6a21      	ldr	r1, [r4, #32]
 8005150:	602b      	str	r3, [r5, #0]
 8005152:	d030      	beq.n	80051b6 <__sflush_r+0x92>
 8005154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	0759      	lsls	r1, r3, #29
 800515a:	d505      	bpl.n	8005168 <__sflush_r+0x44>
 800515c:	6863      	ldr	r3, [r4, #4]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005162:	b10b      	cbz	r3, 8005168 <__sflush_r+0x44>
 8005164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800516c:	6a21      	ldr	r1, [r4, #32]
 800516e:	4628      	mov	r0, r5
 8005170:	47b0      	blx	r6
 8005172:	1c43      	adds	r3, r0, #1
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	d106      	bne.n	8005186 <__sflush_r+0x62>
 8005178:	6829      	ldr	r1, [r5, #0]
 800517a:	291d      	cmp	r1, #29
 800517c:	d82b      	bhi.n	80051d6 <__sflush_r+0xb2>
 800517e:	4a2a      	ldr	r2, [pc, #168]	@ (8005228 <__sflush_r+0x104>)
 8005180:	40ca      	lsrs	r2, r1
 8005182:	07d6      	lsls	r6, r2, #31
 8005184:	d527      	bpl.n	80051d6 <__sflush_r+0xb2>
 8005186:	2200      	movs	r2, #0
 8005188:	6062      	str	r2, [r4, #4]
 800518a:	04d9      	lsls	r1, r3, #19
 800518c:	6922      	ldr	r2, [r4, #16]
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	d504      	bpl.n	800519c <__sflush_r+0x78>
 8005192:	1c42      	adds	r2, r0, #1
 8005194:	d101      	bne.n	800519a <__sflush_r+0x76>
 8005196:	682b      	ldr	r3, [r5, #0]
 8005198:	b903      	cbnz	r3, 800519c <__sflush_r+0x78>
 800519a:	6560      	str	r0, [r4, #84]	@ 0x54
 800519c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800519e:	602f      	str	r7, [r5, #0]
 80051a0:	b1b9      	cbz	r1, 80051d2 <__sflush_r+0xae>
 80051a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80051a6:	4299      	cmp	r1, r3
 80051a8:	d002      	beq.n	80051b0 <__sflush_r+0x8c>
 80051aa:	4628      	mov	r0, r5
 80051ac:	f7ff fbf4 	bl	8004998 <_free_r>
 80051b0:	2300      	movs	r3, #0
 80051b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80051b4:	e00d      	b.n	80051d2 <__sflush_r+0xae>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4628      	mov	r0, r5
 80051ba:	47b0      	blx	r6
 80051bc:	4602      	mov	r2, r0
 80051be:	1c50      	adds	r0, r2, #1
 80051c0:	d1c9      	bne.n	8005156 <__sflush_r+0x32>
 80051c2:	682b      	ldr	r3, [r5, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0c6      	beq.n	8005156 <__sflush_r+0x32>
 80051c8:	2b1d      	cmp	r3, #29
 80051ca:	d001      	beq.n	80051d0 <__sflush_r+0xac>
 80051cc:	2b16      	cmp	r3, #22
 80051ce:	d11e      	bne.n	800520e <__sflush_r+0xea>
 80051d0:	602f      	str	r7, [r5, #0]
 80051d2:	2000      	movs	r0, #0
 80051d4:	e022      	b.n	800521c <__sflush_r+0xf8>
 80051d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051da:	b21b      	sxth	r3, r3
 80051dc:	e01b      	b.n	8005216 <__sflush_r+0xf2>
 80051de:	690f      	ldr	r7, [r1, #16]
 80051e0:	2f00      	cmp	r7, #0
 80051e2:	d0f6      	beq.n	80051d2 <__sflush_r+0xae>
 80051e4:	0793      	lsls	r3, r2, #30
 80051e6:	680e      	ldr	r6, [r1, #0]
 80051e8:	bf08      	it	eq
 80051ea:	694b      	ldreq	r3, [r1, #20]
 80051ec:	600f      	str	r7, [r1, #0]
 80051ee:	bf18      	it	ne
 80051f0:	2300      	movne	r3, #0
 80051f2:	eba6 0807 	sub.w	r8, r6, r7
 80051f6:	608b      	str	r3, [r1, #8]
 80051f8:	f1b8 0f00 	cmp.w	r8, #0
 80051fc:	dde9      	ble.n	80051d2 <__sflush_r+0xae>
 80051fe:	6a21      	ldr	r1, [r4, #32]
 8005200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005202:	4643      	mov	r3, r8
 8005204:	463a      	mov	r2, r7
 8005206:	4628      	mov	r0, r5
 8005208:	47b0      	blx	r6
 800520a:	2800      	cmp	r0, #0
 800520c:	dc08      	bgt.n	8005220 <__sflush_r+0xfc>
 800520e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	f04f 30ff 	mov.w	r0, #4294967295
 800521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005220:	4407      	add	r7, r0
 8005222:	eba8 0800 	sub.w	r8, r8, r0
 8005226:	e7e7      	b.n	80051f8 <__sflush_r+0xd4>
 8005228:	20400001 	.word	0x20400001

0800522c <_fflush_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	690b      	ldr	r3, [r1, #16]
 8005230:	4605      	mov	r5, r0
 8005232:	460c      	mov	r4, r1
 8005234:	b913      	cbnz	r3, 800523c <_fflush_r+0x10>
 8005236:	2500      	movs	r5, #0
 8005238:	4628      	mov	r0, r5
 800523a:	bd38      	pop	{r3, r4, r5, pc}
 800523c:	b118      	cbz	r0, 8005246 <_fflush_r+0x1a>
 800523e:	6a03      	ldr	r3, [r0, #32]
 8005240:	b90b      	cbnz	r3, 8005246 <_fflush_r+0x1a>
 8005242:	f7ff faa1 	bl	8004788 <__sinit>
 8005246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0f3      	beq.n	8005236 <_fflush_r+0xa>
 800524e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005250:	07d0      	lsls	r0, r2, #31
 8005252:	d404      	bmi.n	800525e <_fflush_r+0x32>
 8005254:	0599      	lsls	r1, r3, #22
 8005256:	d402      	bmi.n	800525e <_fflush_r+0x32>
 8005258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800525a:	f7ff fb9a 	bl	8004992 <__retarget_lock_acquire_recursive>
 800525e:	4628      	mov	r0, r5
 8005260:	4621      	mov	r1, r4
 8005262:	f7ff ff5f 	bl	8005124 <__sflush_r>
 8005266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005268:	07da      	lsls	r2, r3, #31
 800526a:	4605      	mov	r5, r0
 800526c:	d4e4      	bmi.n	8005238 <_fflush_r+0xc>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	059b      	lsls	r3, r3, #22
 8005272:	d4e1      	bmi.n	8005238 <_fflush_r+0xc>
 8005274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005276:	f7ff fb8d 	bl	8004994 <__retarget_lock_release_recursive>
 800527a:	e7dd      	b.n	8005238 <_fflush_r+0xc>

0800527c <__swbuf_r>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	460e      	mov	r6, r1
 8005280:	4614      	mov	r4, r2
 8005282:	4605      	mov	r5, r0
 8005284:	b118      	cbz	r0, 800528e <__swbuf_r+0x12>
 8005286:	6a03      	ldr	r3, [r0, #32]
 8005288:	b90b      	cbnz	r3, 800528e <__swbuf_r+0x12>
 800528a:	f7ff fa7d 	bl	8004788 <__sinit>
 800528e:	69a3      	ldr	r3, [r4, #24]
 8005290:	60a3      	str	r3, [r4, #8]
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	071a      	lsls	r2, r3, #28
 8005296:	d501      	bpl.n	800529c <__swbuf_r+0x20>
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	b943      	cbnz	r3, 80052ae <__swbuf_r+0x32>
 800529c:	4621      	mov	r1, r4
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 f82a 	bl	80052f8 <__swsetup_r>
 80052a4:	b118      	cbz	r0, 80052ae <__swbuf_r+0x32>
 80052a6:	f04f 37ff 	mov.w	r7, #4294967295
 80052aa:	4638      	mov	r0, r7
 80052ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ae:	6823      	ldr	r3, [r4, #0]
 80052b0:	6922      	ldr	r2, [r4, #16]
 80052b2:	1a98      	subs	r0, r3, r2
 80052b4:	6963      	ldr	r3, [r4, #20]
 80052b6:	b2f6      	uxtb	r6, r6
 80052b8:	4283      	cmp	r3, r0
 80052ba:	4637      	mov	r7, r6
 80052bc:	dc05      	bgt.n	80052ca <__swbuf_r+0x4e>
 80052be:	4621      	mov	r1, r4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f7ff ffb3 	bl	800522c <_fflush_r>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d1ed      	bne.n	80052a6 <__swbuf_r+0x2a>
 80052ca:	68a3      	ldr	r3, [r4, #8]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	60a3      	str	r3, [r4, #8]
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	6022      	str	r2, [r4, #0]
 80052d6:	701e      	strb	r6, [r3, #0]
 80052d8:	6962      	ldr	r2, [r4, #20]
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	429a      	cmp	r2, r3
 80052de:	d004      	beq.n	80052ea <__swbuf_r+0x6e>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	07db      	lsls	r3, r3, #31
 80052e4:	d5e1      	bpl.n	80052aa <__swbuf_r+0x2e>
 80052e6:	2e0a      	cmp	r6, #10
 80052e8:	d1df      	bne.n	80052aa <__swbuf_r+0x2e>
 80052ea:	4621      	mov	r1, r4
 80052ec:	4628      	mov	r0, r5
 80052ee:	f7ff ff9d 	bl	800522c <_fflush_r>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d0d9      	beq.n	80052aa <__swbuf_r+0x2e>
 80052f6:	e7d6      	b.n	80052a6 <__swbuf_r+0x2a>

080052f8 <__swsetup_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4b29      	ldr	r3, [pc, #164]	@ (80053a0 <__swsetup_r+0xa8>)
 80052fc:	4605      	mov	r5, r0
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	460c      	mov	r4, r1
 8005302:	b118      	cbz	r0, 800530c <__swsetup_r+0x14>
 8005304:	6a03      	ldr	r3, [r0, #32]
 8005306:	b90b      	cbnz	r3, 800530c <__swsetup_r+0x14>
 8005308:	f7ff fa3e 	bl	8004788 <__sinit>
 800530c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005310:	0719      	lsls	r1, r3, #28
 8005312:	d422      	bmi.n	800535a <__swsetup_r+0x62>
 8005314:	06da      	lsls	r2, r3, #27
 8005316:	d407      	bmi.n	8005328 <__swsetup_r+0x30>
 8005318:	2209      	movs	r2, #9
 800531a:	602a      	str	r2, [r5, #0]
 800531c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	f04f 30ff 	mov.w	r0, #4294967295
 8005326:	e033      	b.n	8005390 <__swsetup_r+0x98>
 8005328:	0758      	lsls	r0, r3, #29
 800532a:	d512      	bpl.n	8005352 <__swsetup_r+0x5a>
 800532c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800532e:	b141      	cbz	r1, 8005342 <__swsetup_r+0x4a>
 8005330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005334:	4299      	cmp	r1, r3
 8005336:	d002      	beq.n	800533e <__swsetup_r+0x46>
 8005338:	4628      	mov	r0, r5
 800533a:	f7ff fb2d 	bl	8004998 <_free_r>
 800533e:	2300      	movs	r3, #0
 8005340:	6363      	str	r3, [r4, #52]	@ 0x34
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	2300      	movs	r3, #0
 800534c:	6063      	str	r3, [r4, #4]
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	89a3      	ldrh	r3, [r4, #12]
 8005354:	f043 0308 	orr.w	r3, r3, #8
 8005358:	81a3      	strh	r3, [r4, #12]
 800535a:	6923      	ldr	r3, [r4, #16]
 800535c:	b94b      	cbnz	r3, 8005372 <__swsetup_r+0x7a>
 800535e:	89a3      	ldrh	r3, [r4, #12]
 8005360:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005368:	d003      	beq.n	8005372 <__swsetup_r+0x7a>
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f000 f84f 	bl	8005410 <__smakebuf_r>
 8005372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005376:	f013 0201 	ands.w	r2, r3, #1
 800537a:	d00a      	beq.n	8005392 <__swsetup_r+0x9a>
 800537c:	2200      	movs	r2, #0
 800537e:	60a2      	str	r2, [r4, #8]
 8005380:	6962      	ldr	r2, [r4, #20]
 8005382:	4252      	negs	r2, r2
 8005384:	61a2      	str	r2, [r4, #24]
 8005386:	6922      	ldr	r2, [r4, #16]
 8005388:	b942      	cbnz	r2, 800539c <__swsetup_r+0xa4>
 800538a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800538e:	d1c5      	bne.n	800531c <__swsetup_r+0x24>
 8005390:	bd38      	pop	{r3, r4, r5, pc}
 8005392:	0799      	lsls	r1, r3, #30
 8005394:	bf58      	it	pl
 8005396:	6962      	ldrpl	r2, [r4, #20]
 8005398:	60a2      	str	r2, [r4, #8]
 800539a:	e7f4      	b.n	8005386 <__swsetup_r+0x8e>
 800539c:	2000      	movs	r0, #0
 800539e:	e7f7      	b.n	8005390 <__swsetup_r+0x98>
 80053a0:	20000018 	.word	0x20000018

080053a4 <_sbrk_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d06      	ldr	r5, [pc, #24]	@ (80053c0 <_sbrk_r+0x1c>)
 80053a8:	2300      	movs	r3, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	f7fc fb0e 	bl	80019d0 <_sbrk>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_sbrk_r+0x1a>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_sbrk_r+0x1a>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	200003b8 	.word	0x200003b8

080053c4 <__swhatbuf_r>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	460c      	mov	r4, r1
 80053c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053cc:	2900      	cmp	r1, #0
 80053ce:	b096      	sub	sp, #88	@ 0x58
 80053d0:	4615      	mov	r5, r2
 80053d2:	461e      	mov	r6, r3
 80053d4:	da0d      	bge.n	80053f2 <__swhatbuf_r+0x2e>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	bf14      	ite	ne
 80053e2:	2340      	movne	r3, #64	@ 0x40
 80053e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053e8:	2000      	movs	r0, #0
 80053ea:	6031      	str	r1, [r6, #0]
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	b016      	add	sp, #88	@ 0x58
 80053f0:	bd70      	pop	{r4, r5, r6, pc}
 80053f2:	466a      	mov	r2, sp
 80053f4:	f000 f848 	bl	8005488 <_fstat_r>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	dbec      	blt.n	80053d6 <__swhatbuf_r+0x12>
 80053fc:	9901      	ldr	r1, [sp, #4]
 80053fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005402:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005406:	4259      	negs	r1, r3
 8005408:	4159      	adcs	r1, r3
 800540a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800540e:	e7eb      	b.n	80053e8 <__swhatbuf_r+0x24>

08005410 <__smakebuf_r>:
 8005410:	898b      	ldrh	r3, [r1, #12]
 8005412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005414:	079d      	lsls	r5, r3, #30
 8005416:	4606      	mov	r6, r0
 8005418:	460c      	mov	r4, r1
 800541a:	d507      	bpl.n	800542c <__smakebuf_r+0x1c>
 800541c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	6123      	str	r3, [r4, #16]
 8005424:	2301      	movs	r3, #1
 8005426:	6163      	str	r3, [r4, #20]
 8005428:	b003      	add	sp, #12
 800542a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542c:	ab01      	add	r3, sp, #4
 800542e:	466a      	mov	r2, sp
 8005430:	f7ff ffc8 	bl	80053c4 <__swhatbuf_r>
 8005434:	9f00      	ldr	r7, [sp, #0]
 8005436:	4605      	mov	r5, r0
 8005438:	4639      	mov	r1, r7
 800543a:	4630      	mov	r0, r6
 800543c:	f7ff fb18 	bl	8004a70 <_malloc_r>
 8005440:	b948      	cbnz	r0, 8005456 <__smakebuf_r+0x46>
 8005442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005446:	059a      	lsls	r2, r3, #22
 8005448:	d4ee      	bmi.n	8005428 <__smakebuf_r+0x18>
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	f043 0302 	orr.w	r3, r3, #2
 8005452:	81a3      	strh	r3, [r4, #12]
 8005454:	e7e2      	b.n	800541c <__smakebuf_r+0xc>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	6020      	str	r0, [r4, #0]
 800545a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800545e:	81a3      	strh	r3, [r4, #12]
 8005460:	9b01      	ldr	r3, [sp, #4]
 8005462:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005466:	b15b      	cbz	r3, 8005480 <__smakebuf_r+0x70>
 8005468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800546c:	4630      	mov	r0, r6
 800546e:	f000 f81d 	bl	80054ac <_isatty_r>
 8005472:	b128      	cbz	r0, 8005480 <__smakebuf_r+0x70>
 8005474:	89a3      	ldrh	r3, [r4, #12]
 8005476:	f023 0303 	bic.w	r3, r3, #3
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	81a3      	strh	r3, [r4, #12]
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	431d      	orrs	r5, r3
 8005484:	81a5      	strh	r5, [r4, #12]
 8005486:	e7cf      	b.n	8005428 <__smakebuf_r+0x18>

08005488 <_fstat_r>:
 8005488:	b538      	push	{r3, r4, r5, lr}
 800548a:	4d07      	ldr	r5, [pc, #28]	@ (80054a8 <_fstat_r+0x20>)
 800548c:	2300      	movs	r3, #0
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	f7fc fa72 	bl	800197e <_fstat>
 800549a:	1c43      	adds	r3, r0, #1
 800549c:	d102      	bne.n	80054a4 <_fstat_r+0x1c>
 800549e:	682b      	ldr	r3, [r5, #0]
 80054a0:	b103      	cbz	r3, 80054a4 <_fstat_r+0x1c>
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	bd38      	pop	{r3, r4, r5, pc}
 80054a6:	bf00      	nop
 80054a8:	200003b8 	.word	0x200003b8

080054ac <_isatty_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4d06      	ldr	r5, [pc, #24]	@ (80054c8 <_isatty_r+0x1c>)
 80054b0:	2300      	movs	r3, #0
 80054b2:	4604      	mov	r4, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	602b      	str	r3, [r5, #0]
 80054b8:	f7fc fa71 	bl	800199e <_isatty>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_isatty_r+0x1a>
 80054c0:	682b      	ldr	r3, [r5, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_isatty_r+0x1a>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	200003b8 	.word	0x200003b8

080054cc <_init>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	bf00      	nop
 80054d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d2:	bc08      	pop	{r3}
 80054d4:	469e      	mov	lr, r3
 80054d6:	4770      	bx	lr

080054d8 <_fini>:
 80054d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054da:	bf00      	nop
 80054dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054de:	bc08      	pop	{r3}
 80054e0:	469e      	mov	lr, r3
 80054e2:	4770      	bx	lr
